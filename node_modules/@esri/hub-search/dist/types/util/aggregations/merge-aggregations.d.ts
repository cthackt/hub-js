/**
 * Interface for an Aggregation returned from search request,
 * where label is a value for a fieldname type for which aggregations were requested
 * and value is the aggregation value
 */
export interface IAggregation {
    label: string;
    value: number;
}
/**
 * Interface for an list of Aggregations requested for a particular fieldname
 * Ex. { fieldName: 'access', aggregations: [ { public: 2, private: 5, ... } ] }
 */
export interface IAggregationResult {
    fieldName: string;
    aggregations: IAggregation[];
}
/**
 * A function used to merge the same aggregation across multiple aggregation sources.
 * Implementations can handle summation of two aggregation values (as with COUNT and SUM),
 * but can also handle MIN/MAX
 */
declare type mergeFunc = (valueOne: number, valueTwo: number) => number;
/**
 * Function to merge multiple aggregations results from different result sets. Explicitly assumed
 * that sets can contain overlapping aggregations that should be merged. Also explicitly assumed
 * that they can contain aggregation values that are undefined or null (0 is valid),
 * and/or contain entire aggregation result sets that are empty or falsey
 *
 * @param aggs a list of aggregation result sets from different requests/sources
 * @param mergeFunction a merge function used to merge aggregation values across result sets
 * @returns a list of merged aggregations
 */
export declare function mergeAggregations(aggs?: IAggregationResult[][], mergeFunction?: mergeFunc): IAggregationResult[];
export {};
