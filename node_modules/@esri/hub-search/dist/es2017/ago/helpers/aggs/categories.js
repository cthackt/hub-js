/**
 * Flatten categories as expected by Hub
 *
 * @param {any} categoriesAggs categories aggs array as [{ key, docCount }]
 * @returns {any}
 *
 * Input example:
 * [{ key: '/categories/economy', docCount: 4 }, { key: 'categories/economy/business', docCount: 5 }]
 * Output: [{ key: 'economy', docCount: 9 }, { key: 'business', docCount: 5 }]
 */
export function flattenCategories(categoriesAggs = []) {
    const set = new Set();
    const exclude = ["", "categories"];
    // 1. get a flattened unique set of categories
    categoriesAggs.forEach((agg) => {
        const candidates = agg.key
            .split("/")
            .filter((k) => exclude.indexOf(k) === -1);
        candidates.forEach((k) => {
            set.add(k);
        });
    });
    // 2. sum docCount for unique keys
    const flattenedCategoriesAggs = Array.from(set).reduce((flattenedAggs, uniqueKey) => {
        const docCount = categoriesAggs
            .filter((agg) => agg.key.includes(uniqueKey))
            .map((agg) => agg.docCount)
            .reduce((x, y) => x + y);
        flattenedAggs.push({
            key: uniqueKey,
            docCount
        });
        return flattenedAggs;
    }, []);
    return flattenedCategoriesAggs;
}
//# sourceMappingURL=categories.js.map