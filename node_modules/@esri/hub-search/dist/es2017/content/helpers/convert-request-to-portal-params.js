import { Logger, atob as decode } from "@esri/hub-common";
import { IBooleanOperator, } from "../../types/content";
import { isFilterAnArrayWithData, isFilterANonEmptyString, isFilterFieldADateRange, } from "./common";
const TERM_FIELD = "terms";
const DEFAULT_FILTERS = ['(-type: "code attachment")'];
const STRING_ENCLOSED_FILTER_FIELDS = [
    "title",
    "type",
    "typekeywords",
    "description",
    "tags",
    "snippet",
    "categories",
];
/**
 * Converts the common request format of contentSearch to a format specific to the Portal API
 * @param request - the IContentSearchRequest instance for searching
 */
export function convertToPortalParams(request, defaultPortal, defaultAuthentication) {
    const q = processFilter(request);
    const paging = processPage(request) || { start: 1, num: 10 };
    return createSearchOptions(q, paging, request.options, defaultPortal, defaultAuthentication);
}
function processFilter(request) {
    const filter = request.filter || {};
    const filters = Object.keys(filter).reduce((arr, key) => {
        const clause = convertToPortalFilterClause(key, filter[key]);
        if (clause) {
            arr.push(clause);
        }
        return arr;
    }, []);
    const filtersWithDefaults = addDefaultFilters(filters);
    return filtersWithDefaults.join(" AND ").trim();
}
/**
 * Processes the paging parameters provided as part of a search request
 * @param request content search request
 */
export function processPage(request) {
    const options = request.options || {};
    const providedPage = options.page || {
        start: 1,
        num: 10,
    };
    return typeof providedPage === "string"
        ? decodePage(providedPage)
        : providedPage;
}
function createSearchOptions(q, page, options = {}, defaultPortal, defaultAuthentication) {
    return {
        q,
        sortOrder: options.sortOrder,
        sortField: options.sortField,
        params: {
            countFields: options.aggregations,
            countSize: options.aggregations ? 200 : undefined,
            start: page.start,
            num: page.num,
        },
        bbox: options.bbox,
        portal: options.portal || defaultPortal,
        authentication: options.authentication || defaultAuthentication,
        httpMethod: "POST",
    };
}
function convertToPortalFilterClause(filterField, filterValue) {
    if (isFilterANonEmptyString(filterValue)) {
        return processStringFilter(filterField, filterValue);
    }
    else if (isFilterAnArrayWithData(filterValue)) {
        return processArrayFilter(filterField, filterValue);
    }
    else if (isFilterFieldADateRange(filterField, filterValue)) {
        return processDateField(filterField, filterValue);
    }
    else {
        return processFieldFilter(filterField, filterValue);
    }
}
function addDefaultFilters(filters) {
    return filters.concat(DEFAULT_FILTERS);
}
function processStringFilter(filterField, filterValue) {
    if (filterField === TERM_FIELD) {
        return `(${stringifyFilterValue(filterField, filterValue)})`;
    }
    return `(${filterField}: ${stringifyFilterValue(filterField, filterValue)})`;
}
function processArrayFilter(filterField, filterArray) {
    const filters = filterArray.map((filter) => stringifyFilterValue(filterField, filter));
    return `(${filterField}: ${filters.join(` OR ${filterField}: `)})`;
}
function processDateField(filterField, filterValue) {
    return `(${filterField}: [${filterValue.from || 0} TO ${filterValue.to || new Date().getTime()}])`;
}
function processFieldFilter(filterField, contentFilter) {
    if (!contentFilter || !isFilterAnArrayWithData(contentFilter.value)) {
        return undefined;
    }
    const operator = contentFilter.bool || IBooleanOperator.OR;
    const filters = contentFilter.value.map((filter) => stringifyFilterValue(filterField, filter));
    if (operator === IBooleanOperator.NOT) {
        return `(-${filterField}: ${filters.join(` AND -${filterField}: `)})`;
    }
    else {
        return `(${filterField}: ${filters.join(` ${operator.toString()} ${filterField}: `)})`;
    }
}
function stringifyFilterValue(filterField, filterValue) {
    return STRING_ENCLOSED_FILTER_FIELDS.indexOf(filterField) >= 0
        ? `"${filterValue}"`
        : filterValue;
}
function decodePage(page) {
    try {
        const decodedPage = decode(page);
        if (decodedPage === null) {
            throw new Error();
        }
        return JSON.parse(decodedPage);
    }
    catch (err) {
        Logger.error(`error decoding and parsing the provided page: ${page}. Defaulting to starting page`);
        return undefined;
    }
}
//# sourceMappingURL=convert-request-to-portal-params.js.map