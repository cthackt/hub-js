import { searchItems, } from "@esri/arcgis-rest-portal";
import { cloneObject, itemToContent } from "@esri/hub-common";
/**
 * Converts the response format returned by the Portal API to a common format
 * @param request - the ISearchOptions instance used to invoke the request
 * @param response - the ISearchResult JSON returned by the Portal API
 */
export function convertPortalResponse(request, response) {
    const results = response.results.map(itemToContent);
    const count = response.num;
    const total = response.total;
    const hasNext = response.nextStart > -1;
    const query = response.query;
    const aggregations = response.aggregations
        ? mapAggregations(response.aggregations)
        : undefined;
    const next = getNextFunction(request, response.nextStart, response.total);
    return {
        results,
        count,
        total,
        hasNext,
        query,
        aggregations,
        next,
    };
}
function mapAggregations(aggregations) {
    return Object.keys(aggregations).reduce((contentAggs, aggType) => {
        // Built in as a safety if Portal returns unsupported aggregations
        /* istanbul ignore else */
        if (aggType.toLowerCase() === "counts") {
            contentAggs.counts = mapCountAggregations(aggregations[aggType]);
        }
        return contentAggs;
    }, {});
}
function mapCountAggregations(countAggs) {
    return countAggs.map((agg) => {
        const mappedAggs = agg.fieldValues.map((aggValue) => ({
            label: aggValue.value,
            value: aggValue.count,
        }));
        return {
            fieldName: agg.fieldName,
            aggregations: mappedAggs,
        };
    });
}
function getNextFunction(request, nextStart, total) {
    const clonedRequest = cloneObject(request);
    // Authentication not properly cloned
    clonedRequest.authentication = request.authentication;
    clonedRequest.start = nextStart > -1 ? nextStart : total + 1;
    return (authentication) => {
        if (authentication) {
            clonedRequest.authentication = authentication;
        }
        return searchItems(clonedRequest).then((response) => {
            return convertPortalResponse(clonedRequest, response);
        });
    };
}
//# sourceMappingURL=convert-portal-response.js.map