"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleFilter = void 0;
const build_filter_1 = require("./build-filter");
const downloadable_1 = require("./downloadable");
const has_api_1 = require("./has-api");
const group_ids_1 = require("./group-ids");
const collection_1 = require("./collection");
// custom filter functions
const customFilters = {
    downloadable: downloadable_1.downloadableFilter,
    hasApi: has_api_1.hasApiFilter,
    groupIds: group_ids_1.groupIds,
    collection: collection_1.collectionFilter
};
function isCustomFilter(filter) {
    return !!customFilters[filter];
}
/**
 * Convert filter object into AGO filter string
 * @param queryFilters filter object created by create-filters like { tags: { fn: 'all', terms: ['a'] } }
 */
function handleFilter(queryFilters) {
    const catalogDefinition = [];
    const otherFilters = [];
    Object.keys(queryFilters).forEach(key => {
        let clause;
        if (isCustomFilter(key)) {
            clause = customFilters[key](queryFilters, key);
        }
        else {
            clause = build_filter_1.buildFilter(queryFilters, key);
        }
        if (queryFilters[key].catalogDefinition) {
            catalogDefinition.push(clause);
        }
        else {
            otherFilters.push(clause);
        }
    });
    if (catalogDefinition.length) {
        const catalogClause = `(${catalogDefinition.join(" OR ")})`;
        if (otherFilters.length) {
            return `${catalogClause} AND (${otherFilters.join(" AND ")})`;
        }
        else {
            return catalogClause;
        }
    }
    else if (otherFilters.length) {
        return otherFilters.join(" AND ");
    }
    else {
        return "";
    }
}
exports.handleFilter = handleFilter;
//# sourceMappingURL=handle-filter.js.map