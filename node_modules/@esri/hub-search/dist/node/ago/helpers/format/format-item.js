"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatItem = void 0;
// helper functions to make items look more like datasets
//
// item queries will look like this ->
// {
//   data: [{
//     id: item-id,
//     type: 'item',
//     attributes: {
//       // will have attribute 'parity' with datasets. Many of these values will be null.
//     },
//     meta: { highlights: {} }
//     links: {
//       // computed links for the item result. These can be used throughout the app when linking to
//       // AGO, APIs, etc
//     }
//   }],
//   meta: {
//     aggs: {
//       // built by another query against AGO API and then formatted in the same format as the V3 API
//     },
//     stats: {
//       count:,
//       totalCount:,
//     }
//   }
// }
const hub_common_1 = require("@esri/hub-common");
const highlights_1 = require("./highlights");
function formatItem(item, query) {
    const formattedItem = {
        id: item.id,
        type: "item",
        attributes: formatItemAttributes(item)
    };
    if (query) {
        // create highlights since AGO does not return them
        formattedItem.meta = {};
        formattedItem.meta.highlights = highlights(item, query);
    }
    return formattedItem;
}
exports.formatItem = formatItem;
function formatItemAttributes(item) {
    const hubType = hub_common_1.getCategory(item.type);
    const additionalAttrs = {
        // computed or null attributes so items & datasets look the same
        name: item.title,
        searchDescription: item.description,
        hubType: hubType || "Other",
        collection: hub_common_1.getTypeCategories(item),
        extent: formatExtent(item.extent)
    };
    return Object.assign(Object.assign({}, item), additionalAttrs);
}
function formatExtent(extent) {
    return {
        coordinates: extent,
        type: "envelope"
    };
}
function highlights(item, query) {
    // calculate highlights based on AGO restricted item, hence use description field but return as `searchDescription`
    // because the search-result/component expects searchDescription
    return {
        name: highlights_1.calcHighlights(item.title, query, "name"),
        searchDescription: highlights_1.calcHighlights(item.description, query, "description")
    };
}
//# sourceMappingURL=format-item.js.map