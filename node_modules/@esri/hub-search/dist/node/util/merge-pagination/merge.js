"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergePages = void 0;
const hub_common_1 = require("@esri/hub-common");
const invalid_pagination_input_1 = require("./invalid-pagination-input");
/**
 * When multiple data sources underly a paginated search, the search implementation should be able to
 * search at the appropriate starting point for each source for a given paged set of results. This
 * function merges an array of page states for each source, denoted by their label, into a base64-
 * encoded cursor string that the implementation can use for the next set of results.
 *
 * @param pages an array of page states denoted by their label and the starting point for the next page
 * @returns a base64-encoded cursor string to use when obtaining next page of results.
 *
 */
function mergePages(pages) {
    if (!pages || !Array.isArray(pages)) {
        throw new invalid_pagination_input_1.InvalidPaginationInputError(`Invalid Input Error. Must be array of IDataPageNextStart, received: ${typeof pages}`, pages);
    }
    const mergedPages = pages.reduce((pageObj, page) => {
        pageObj[page.label] = page.nextPageStart || 1;
        return pageObj;
    }, {});
    return hub_common_1.btoa(JSON.stringify(mergedPages));
}
exports.mergePages = mergePages;
//# sourceMappingURL=merge.js.map