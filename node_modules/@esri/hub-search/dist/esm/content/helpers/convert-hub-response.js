import { datasetToContent, getProp } from "@esri/hub-common";
var PROP_MAP = {
    title: "name",
};
/**
 * Converts the response format returned by the Hub Indexer V3 API to a common format
 * @param request - the ISearchParams instance used to invoke the request
 * @param response - the JSON returned by the Hub Indexer V3 API
 * @param defaultAuthentication - a default UserSession instance that can be used for the next() request if none provided
 */
export function convertHubResponse(request, response, defaultAuthentication) {
    if (response === void 0) { response = { data: [], meta: {} }; }
    var results = response.data.map(datasetToContent);
    var _a = getResponseMetadata(response), count = _a.count, total = _a.total, hasNext = _a.hasNext, query = _a.query, aggregations = _a.aggregations;
    var next = getNextFunction(request, response, hasNext, defaultAuthentication);
    return {
        results: results,
        count: count,
        total: total,
        hasNext: hasNext,
        query: query,
        aggregations: aggregations ? mapAggregations(aggregations) : undefined,
        next: next,
    };
}
function mapAggregations(aggregations) {
    return {
        counts: mapCountAggregations(aggregations),
    };
}
function mapCountAggregations(countAggs) {
    return Object.keys(countAggs).map(function (aggKey) {
        var aggregations = countAggs[aggKey]
            ? countAggs[aggKey].map(function (agg) { return ({
                label: agg.key.toLowerCase(),
                value: agg.docCount,
            }); })
            : [];
        return {
            fieldName: aggKey,
            aggregations: aggregations,
        };
    });
}
function getNextFunction(request, response, hasNext, defaultAuthentication) {
    return function (auth) {
        var authentication = auth || defaultAuthentication;
        var headers = authentication &&
            authentication.serialize &&
            new Headers({ authentication: authentication.serialize() });
        if (hasNext) {
            // should this use hubRequest instead of fetch?
            return fetch(response.meta.next, {
                method: "GET",
                mode: "cors",
                headers: headers,
            })
                .then(function (res) { return res.json(); })
                .then(function (res) { return convertHubResponse(request, res, defaultAuthentication); });
        }
        var metadata = getResponseMetadata(response);
        return Promise.resolve({
            results: [],
            count: 0,
            total: metadata.total,
            hasNext: false,
            query: metadata.query,
            aggregations: metadata.aggregations
                ? mapAggregations(metadata.aggregations)
                : undefined,
            next: getNextFunction(request, response, false),
        });
    };
}
function getResponseMetadata(response) {
    var respQuery = getProp(response, "meta.queryParameters");
    var query = respQuery ? JSON.stringify(respQuery) : undefined;
    var respAggregations = getProp(response, "meta.stats.aggs") || {};
    var aggregations = Object.keys(respAggregations).length > 0 ? respAggregations : undefined;
    return {
        count: getProp(response, "meta.stats.count") || 0,
        total: getProp(response, "meta.stats.totalCount") || 0,
        hasNext: !!getProp(response, "meta.next"),
        query: query,
        aggregations: aggregations,
    };
}
//# sourceMappingURL=convert-hub-response.js.map