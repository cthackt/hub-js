/**
 * Flatten categories as expected by Hub
 *
 * @param {any} categoriesAggs categories aggs array as [{ key, docCount }]
 * @returns {any}
 *
 * Input example:
 * [{ key: '/categories/economy', docCount: 4 }, { key: 'categories/economy/business', docCount: 5 }]
 * Output: [{ key: 'economy', docCount: 9 }, { key: 'business', docCount: 5 }]
 */
export function flattenCategories(categoriesAggs) {
    if (categoriesAggs === void 0) { categoriesAggs = []; }
    var set = new Set();
    var exclude = ["", "categories"];
    // 1. get a flattened unique set of categories
    categoriesAggs.forEach(function (agg) {
        var candidates = agg.key
            .split("/")
            .filter(function (k) { return exclude.indexOf(k) === -1; });
        candidates.forEach(function (k) {
            set.add(k);
        });
    });
    // 2. sum docCount for unique keys
    var flattenedCategoriesAggs = Array.from(set).reduce(function (flattenedAggs, uniqueKey) {
        var docCount = categoriesAggs
            .filter(function (agg) { return agg.key.includes(uniqueKey); })
            .map(function (agg) { return agg.docCount; })
            .reduce(function (x, y) { return x + y; });
        flattenedAggs.push({
            key: uniqueKey,
            docCount: docCount
        });
        return flattenedAggs;
    }, []);
    return flattenedCategoriesAggs;
}
//# sourceMappingURL=categories.js.map