import { __assign, __awaiter, __generator } from "tslib";
import { searchItems } from "@esri/arcgis-rest-portal";
import { encodeAgoQuery } from "./encode-ago-query";
import { getProp, chunkArray } from "@esri/hub-common";
var MAX_COUNTFIELDS = 3;
// Search for Items in ArcGIS and return raw ago response
export function getItems(params, token, portal, authentication) {
    return __awaiter(this, void 0, void 0, function () {
        var agoParams, chunkedCountFields, promises, responses, allCounts, _i, responses_1, response, counts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    agoParams = encodeAgoQuery(params);
                    if (!agoParams.countFields) return [3 /*break*/, 2];
                    chunkedCountFields = chunkArray(agoParams.countFields.split(","), MAX_COUNTFIELDS).map(function (fieldArrayChunk) { return fieldArrayChunk.join(","); });
                    promises = chunkedCountFields.map(function (chunk) {
                        var countFields = chunk;
                        return searchItems(__assign(__assign({}, agoParams), { params: {
                                // NOTE: we shouldn't need this since we pass in authentication below
                                token: token,
                                countFields: countFields,
                                countSize: agoParams.countSize,
                            }, countFields: countFields,
                            portal: portal,
                            authentication: authentication, httpMethod: "POST" }));
                    });
                    return [4 /*yield*/, Promise.all(promises)];
                case 1:
                    responses = _a.sent();
                    allCounts = [];
                    for (_i = 0, responses_1 = responses; _i < responses_1.length; _i++) {
                        response = responses_1[_i];
                        counts = getProp(response, "aggregations.counts") || [];
                        allCounts = allCounts.concat(counts);
                    }
                    responses[0].aggregations = {
                        counts: allCounts,
                    };
                    return [2 /*return*/, responses[0]];
                case 2: return [2 /*return*/, searchItems(__assign(__assign({}, agoParams), { params: {
                            // NOTE: we shouldn't need this since we pass in authentication below
                            token: token,
                        }, portal: portal, httpMethod: "POST", authentication: authentication }))];
            }
        });
    });
}
//# sourceMappingURL=get-items.js.map