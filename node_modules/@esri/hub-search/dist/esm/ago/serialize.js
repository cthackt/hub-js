import { createFilters, encodeFilters, filterSchema, encodeParams } from "./helpers/filters";
/**
 * ```
 * serialize raw query parameters into hub specific URI encoding
 * Example:
 * Input: { q: 'crime', tags: 'a,b,c', sort: 'name' }
 * Output: 'q=crime&tags=all(a,b,c)&sort=name'
 * ```
 * @export
 * @param {ISearchParams} searchParams
 * @returns {string}
 */
export function serialize(searchParams) {
    // 1. handle filterable params like tags, source, hasApi, groupIds since they follow custom logic
    var filters = createFilters(searchParams);
    var encodedFilters = encodeFilters(filters);
    // 2. handle non-filters like q, sort etc which have <string: string> type and also nested types like page, agg.
    // extract non-filterable fields from search params
    var nonFilterKeys = Object.keys(searchParams).filter(function (param) { return !isFilterable(param); });
    var nonFilterSearchParams = {};
    nonFilterKeys.forEach(function (key) {
        nonFilterSearchParams[key] = searchParams[key];
    });
    var encodedNonFilters = encodeParams(nonFilterSearchParams);
    var parts = [];
    // don't include blank strings in the URI encoding
    if (encodedNonFilters)
        parts.push(encodedNonFilters);
    if (encodedFilters)
        parts.push(encodedFilters);
    return parts.join("&");
}
export function isFilterable(field) {
    return filterSchema[field] && filterSchema[field].type === "filter";
}
//# sourceMappingURL=serialize.js.map