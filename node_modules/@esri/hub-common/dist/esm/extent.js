import { getProp } from "./objects";
import { request } from "@esri/arcgis-rest-request";
export function createExtent(xmin, ymin, xmax, ymax, wkid) {
    if (wkid === void 0) { wkid = 4326; }
    return {
        xmin: xmin,
        ymin: ymin,
        xmax: xmax,
        ymax: ymax,
        // type: 'extent',
        spatialReference: {
            wkid: wkid,
        },
    };
}
/**
 * Turns an extent into a bbox
 * @param envelope extent
 */
export function extentToBBox(envelope) {
    return [
        [envelope.xmin, envelope.ymin],
        [envelope.xmax, envelope.ymax],
    ];
}
export var GLOBAL_EXTENT = {
    xmin: -180,
    ymin: -90,
    xmax: 180,
    ymax: 90,
    spatialReference: {
        wkid: 4326,
    },
};
/**
 * Gets the geographic extent for an org
 * @param hubRequestOptions
 */
export function getGeographicOrgExtent(hubRequestOptions) {
    var portal = hubRequestOptions.portalSelf;
    var orgExtent = portal.defaultExtent;
    var geometryServiceUrl = getProp(portal, "helperServices.geometry.url");
    // Define a default global extent object
    if (!geometryServiceUrl) {
        return Promise.resolve(GLOBAL_EXTENT);
    }
    if (!orgExtent) {
        return Promise.resolve(GLOBAL_EXTENT);
    }
    var url = geometryServiceUrl + "/project";
    // geometry params...
    var geometryParam = {
        geometryType: "esriGeometryEnvelope",
        geometries: [orgExtent],
    };
    var options = {
        httpMethod: "POST",
        params: {
            geometries: JSON.stringify(geometryParam),
            transformForward: false,
            transformation: "",
            inSR: orgExtent.spatialReference.wkid,
            outSR: 4326,
            f: "json",
        },
    };
    // add in auth if it's passed
    if (hubRequestOptions.authentication) {
        options.authentication = hubRequestOptions.authentication;
    }
    return request(url, options)
        .then(function (response) {
        var geom = response.geometries[0];
        return {
            xmin: geom.xmin,
            ymin: geom.ymin,
            xmax: geom.xmax,
            ymax: geom.ymax,
            spatialReference: {
                wkid: 4326,
            },
        };
    })
        .catch(function (ex) {
        return GLOBAL_EXTENT;
    });
}
/**
 * Get the default org extent as a bbox for use on item.extent
 * @param {IHubRequestOptions} hubRequestOptions
 */
export function getOrgExtentAsBBox(hubRequestOptions) {
    return getGeographicOrgExtent(hubRequestOptions).then(function (extent) {
        return extentToBBox(extent);
    });
}
/**
 * checks if the extent is a valid BBox (2 element array of coordinate pair arrays)
 * @param extent
 * @returns
 */
export var isBBox = function (extent) {
    return (Array.isArray(extent) &&
        Array.isArray(extent[0]) &&
        Array.isArray(extent[1]));
};
export function isExtentCoordinateArray(extent) {
    /* tslint:disable no-console */
    console.warn("DEPRECATED: use isBBox() instead");
    /* tslint:enable no-console */
    return isBBox(extent);
}
function isExtentJSON(extent) {
    return ["xmin", "ymin", "xmax", "ymax"].every(function (key) { return typeof extent[key] === "number"; });
}
/**
 * Check if the given extent is in a known format
 * @param  {Object} extent extent in any format
 * @return {Boolean}       indicator
 */
export function isValidExtent(extent) {
    return (!!extent &&
        [isExtentCoordinateArray, isExtentJSON].some(function (test) { return test(extent); }));
}
export var bBoxToPolygon = function (bBox) {
    var _a = bBox[0], xmin = _a[0], ymin = _a[1], _b = bBox[1], xmax = _b[0], ymax = _b[1];
    var rings = [
        [
            [xmin, ymin],
            [xmax, ymin],
            [xmax, ymax],
            [xmin, ymax],
            [xmin, ymin],
        ],
    ];
    var wkid = 4326;
    return {
        rings: rings,
        spatialReference: {
            wkid: wkid,
        },
    };
};
//# sourceMappingURL=extent.js.map