import { getProp, getWithDefault } from ".";
/**
 * Hash of Hub API end points so updates
 * are centralized
 */
var hubApiEndpoints = {
    domains: "/api/v3/domains",
    search: "/api/v3/datasets",
    discussions: "/api/discussions/v1",
};
/**
 * Abstraction that holds a `UserSession`, along with
 * getters to streamline access to various platform
 * urls, and common constructs like `IRequestOptions`,
 * `IUserRequestOptions` etc.
 *
 * Instances are intended to be immutable, but this is not directly enforced.
 *
 * In most circumstances, this class should be created by
 * the ArcGISContextManager class.
 */
var ArcGISContext = /** @class */ (function () {
    /**
     * Create a new instance of `ArcGISContext`.
     *
     * @param opts
     */
    function ArcGISContext(opts) {
        this._portalUrl = "https://www.arcgis.com";
        this.id = opts.id;
        this._portalUrl = opts.portalUrl;
        this._hubUrl = opts.hubUrl;
        if (opts.authentication) {
            this._authentication = opts.authentication;
        }
        if (opts.portalSelf) {
            this._portalSelf = opts.portalSelf;
        }
        if (opts.currentUser) {
            this._currentUser = opts.currentUser;
        }
        if (opts.properties) {
            this._properties = opts.properties;
        }
    }
    Object.defineProperty(ArcGISContext.prototype, "session", {
        /**
         * Return the UserSession if authenticated
         */
        get: function () {
            return this._authentication;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "isAuthenticated", {
        /**
         * Return boolean indicating if authenticatio is present
         */
        get: function () {
            return !!this._authentication;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "userRequestOptions", {
        /**
         * Return `IUserRequestOptions`, which is used for REST-JS
         * functions which require authentication information.
         *
         * If context is not authenticated, this function will throw
         */
        get: function () {
            if (this.isAuthenticated) {
                return {
                    authentication: this._authentication,
                    portal: this.sharingApiUrl,
                };
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "requestOptions", {
        /**
         * Return `IRequestOptions`, which is used by REST-JS functions
         * which *may* use authentication information if provided.
         *
         * If context is not authenticated, this function just returns
         * the `portal` property, which informs REST-JS what Sharing API
         * instance to use (i.e. AGO, Enterprise etc)
         */
        get: function () {
            var ro = {
                portal: this.sharingApiUrl,
            };
            if (this.isAuthenticated) {
                ro = {
                    authentication: this._authentication,
                    portal: this.sharingApiUrl,
                };
            }
            return ro;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "hubRequestOptions", {
        /**
         * Return a `IHubRequestOptions` object
         */
        get: function () {
            // We may add more logic around what is returned in some corner cases
            return {
                authentication: this.session,
                isPortal: this.isPortal,
                portalSelf: this.portal,
                hubApiUrl: this.hubUrl,
                portal: this.sharingApiUrl,
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "portalUrl", {
        /**
         * Return the portal url i.e. https://www.arcgis.com
         *
         * If authenticated @ ArcGIS Online, it will return
         * the https://org.env.arcgis.com
         *
         * If authenticated @ ArcGIS Enterprise, it will return
         * https://{portalHostname}/{webadaptor}
         */
        get: function () {
            if (this.isAuthenticated) {
                if (this.isPortal) {
                    return "https://" + this._portalSelf.portalHostname;
                }
                else {
                    return "https://" + this._portalSelf.urlKey + "." + this._portalSelf.customBaseUrl;
                }
            }
            else {
                return this._portalUrl;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "sharingApiUrl", {
        /**
         * Returns the url to the sharing api composed from portalUrl
         * i.e. https://myorg.maps.arcgis.com/sharing/rest
         */
        get: function () {
            return this.portalUrl + "/sharing/rest";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "hubUrl", {
        /**
         * Returns the Hub url, based on the portalUrl
         *
         * For ArcGIS Enterprise this will return `undefined`
         */
        get: function () {
            return this._hubUrl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "isPortal", {
        /**
         * Returns boolean indicating if the backing system
         * is ArcGIS Enterprise (formerly ArcGIS Portal) or not
         */
        get: function () {
            return this._portalSelf
                ? this._portalSelf.isPortal
                : this._portalUrl.indexOf("arcgis.com") === -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "discussionsServiceUrl", {
        /**
         * Returns the discussions API URL
         */
        get: function () {
            if (this._hubUrl) {
                return "" + this._hubUrl + hubApiEndpoints.discussions;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "hubSearchServiceUrl", {
        /**
         * Returns the Hub Search API URL
         */
        get: function () {
            if (this._hubUrl) {
                return "" + this._hubUrl + hubApiEndpoints.search;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "domainServiceUrl", {
        /**
         * Returns Hub Domain Service URL
         */
        get: function () {
            if (this._hubUrl) {
                return "" + this._hubUrl + hubApiEndpoints.domains;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "eventsConfig", {
        /**
         * Returns the Events configuration object from portal/self
         *
         * `{serviceId: '3ef..', publicViewId: 'bc3...'}`
         */
        get: function () {
            if (this._portalSelf) {
                return getProp(this._portalSelf, "portalProperties.hub.settings.events");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "hubEnabled", {
        /**
         * Returns boolean indicating if the current user
         * belongs to an organization that has licensed
         * ArcGIS Hub
         */
        get: function () {
            return getWithDefault(this._portalSelf, "portalProperties.hub.enabled", false);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "communityOrgId", {
        /**
         * Return the Hub Community Org Id, if defined
         */
        get: function () {
            if (this._portalSelf) {
                return getProp(this._portalSelf, "portalProperties.hub.settings.communityOrg.orgId");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "communityOrgHostname", {
        /**
         * Returns the Hub Community Org Hostname, if defined
         *
         * i.e. c-org.maps.arcgis.com
         */
        get: function () {
            if (this._portalSelf) {
                return getProp(this._portalSelf, "portalProperties.hub.settings.communityOrg.portalHostname");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "communityOrgUrl", {
        /**
         * Returns the Hub Community Org url
         *
         * i.e. https://c-org.maps.arcgis.com
         */
        get: function () {
            if (this.communityOrgHostname) {
                return "https://" + this.communityOrgHostname;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "helperServices", {
        /**
         * Returns the hash of helper services from portal self
         */
        get: function () {
            if (this._portalSelf) {
                return this._portalSelf.helperServices;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "currentUser", {
        /**
         * Returns the current user as IUser
         */
        get: function () {
            return this._currentUser;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "portal", {
        /**
         * Returns the portal object as IPortal
         */
        get: function () {
            return this._portalSelf;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArcGISContext.prototype, "properties", {
        /**
         * Return the properties hash that was passed in.
         * Useful for app-specific context such as the active
         * Site for ArcGIS Hub
         */
        get: function () {
            return this._properties;
        },
        enumerable: false,
        configurable: true
    });
    return ArcGISContext;
}());
export { ArcGISContext };
//# sourceMappingURL=ArcGISContext.js.map