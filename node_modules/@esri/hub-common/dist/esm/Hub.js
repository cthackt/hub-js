import { __awaiter, __generator } from "tslib";
import { HubSiteManager } from ".";
import { ArcGISContextManager, } from "./ArcGISContextManager";
import { HubProjectManager } from "./projects/HubProjectManager";
/**
 * Hub class can be used as an entry point to managing
 * content, teams, sites, projects etc, in an organization's Hub.
 *
 * ```js
 * import {Hub} from '@esri/hub-common';
 * // create a Hub instance, authenticating as a specific user
 * // working against arcgis online
 * const myHub = await Hub.create({authOptions: {username: "casey", password: "jones"}});
 *
 * myHub.context.currentUser //=> {username: "casey", ...} as IUser
 *
 * const pavingProject = await myHub.projects.create({name: "12th Street Paving"});
 * pavingProject.summary = "This is the 2024 planned paving of 12th Street, between 8th and 11th Ave";
 * await myHub.projects.update(pavingProject);
 * ```
 *
 * This is a convenience class. Hub Managers can be created
 * directly, or the underlying functions can be imported an used
 * as need for scenarios where these class structures introduce
 * unwanted complexity
 */
var Hub = /** @class */ (function () {
    /**
     * Private so we can employ a factory function to do
     * async work during creation
     * @param contextManager
     */
    function Hub(contextManager) {
        this._contextManager = contextManager;
    }
    /**
     * Factory function to construct a new Hub instance.
     * @param contextManager
     * @returns
     */
    Hub.create = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var opts, mgr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!options.contextManager) return [3 /*break*/, 1];
                        return [2 /*return*/, new Hub(options.contextManager)];
                    case 1:
                        opts = options.managerOptions || {};
                        return [4 /*yield*/, ArcGISContextManager.create(opts)];
                    case 2:
                        mgr = _a.sent();
                        return [2 /*return*/, new Hub(mgr)];
                }
            });
        });
    };
    Object.defineProperty(Hub.prototype, "context", {
        /**
         * Get the context
         * @readonly
         * @memberof Hub
         */
        get: function () {
            return this._contextManager.context;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hub.prototype, "projects", {
        /**
         * HubProjectManager for the current Hub
         *
         * @readonly
         * @memberof Hub
         */
        get: function () {
            if (!this._projectManager) {
                this._projectManager = HubProjectManager.init(this._contextManager);
            }
            return this._projectManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hub.prototype, "sites", {
        /**
         * HubSiteManager for the current Hub
         *
         * @readonly
         * @memberof Hub
         */
        get: function () {
            if (!this._siteManager) {
                this._siteManager = HubSiteManager.init(this._contextManager);
            }
            return this._siteManager;
        },
        enumerable: false,
        configurable: true
    });
    return Hub;
}());
export { Hub };
//# sourceMappingURL=Hub.js.map