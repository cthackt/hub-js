import { __assign, __extends } from "tslib";
import { getHubApiUrl } from ".";
import { buildUrl } from "./urls/build-url";
/**
 * remote server error
 */
var RemoteServerError = /** @class */ (function (_super) {
    __extends(RemoteServerError, _super);
    function RemoteServerError(message, url, status) {
        var _this = _super.call(this, message) || this;
        _this.status = status;
        _this.url = url;
        return _this;
    }
    return RemoteServerError;
}(Error));
export { RemoteServerError };
/**
 * ```js
 * import { hubApiRequest } from "@esri/hub-common";
 * //
 * hubApiRequest(
 *   "/datasets",
 *   requestOptions
 * })
 *   .then(response);
 * ```
 * make a request to the Hub API
 * @param route API route
 * @param requestOptions request options
 */
export function hubApiRequest(route, requestOptions) {
    // merge in default request options
    var options = __assign({ 
        // why do we default to GET w/ our API?
        httpMethod: "GET" }, requestOptions);
    // use fetch override if any
    var _fetch = options.fetch || fetch;
    // merge in default headers
    var headers = __assign({ "Content-Type": "application/json" }, options.headers);
    // build query params/body based on requestOptions.params
    var query;
    var body;
    if (options.httpMethod === "GET") {
        // pass params in query string
        query = options.params;
    }
    else {
        // pass params in request body
        body = JSON.stringify(options.params);
    }
    // build Hub API URL
    var url = buildUrl({
        host: getHubApiUrl(options),
        path: ("/api/v3/" + route).replace(/\/\//g, "/"),
        query: query,
    });
    return _fetch(url, {
        method: options.httpMethod,
        headers: headers,
        body: body,
    }).then(function (resp) {
        if (resp.ok) {
            return resp.json();
        }
        else {
            throw new RemoteServerError(resp.statusText, url, resp.status);
        }
    });
}
//# sourceMappingURL=request.js.map