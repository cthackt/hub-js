/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Runs the given task and returns a IRevertableTaskResult
 * @param {Function} task A task method to run
 * @param {Function} revert A method to revert the task
 * @returns {Promise<IRevertableTaskResult>}
 */
export var runRevertableTask = function (task, revert) {
    return task()
        .then(function (results) {
        return {
            status: "fullfilled",
            results: results,
            revert: revert
        };
    })
        .catch(function (error) {
        return { status: "rejected", error: error };
    });
};
/**
 * Processes an Array of Promise<IRevertableTaskResult>. When all IRevertableTaskResult
 * are IRevertableTaskSuccess, it resolves an Array of all result values. If any
 * IRevertableTaskResult are IRevertableTaskFailed, it reverts all IRevertableTaskSuccess
 * and rejects with the first IRevertableTaskFailed error
 * @param revertableTasks
 * @returns {Promise<any[]>}
 */
export var processRevertableTasks = function (revertableTasks) {
    return Promise.all(revertableTasks).then(function (results) {
        var isFullfilled = function (result) {
            return result.status === "fullfilled";
        };
        var successfulTasks = results.filter(isFullfilled);
        var failedTasks = results.filter(function (result) { return !isFullfilled(result); });
        if (failedTasks.length) {
            var reverts = successfulTasks.map(function (task) { return task.revert(); });
            // fire & forget
            /* tslint:disable no-empty */
            Promise.all(reverts).catch(function () { });
            /* tslint:enable no-empty */
            throw failedTasks[0].error;
        }
        var returnResults = successfulTasks.map(function (result) { return result.results; });
        return returnResults;
    });
};
//# sourceMappingURL=revertable-tasks.js.map