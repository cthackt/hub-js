/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
import { __extends } from "tslib";
import { getWithDefault } from "./objects/get-with-default";
/**
 * Generic Solution Error with an Error stack as well
 * as an optional serialized OperationStack.
 *
 * Also accepts a `rootCause` Error object
 */
var OperationError = /** @class */ (function (_super) {
    __extends(OperationError, _super);
    /**
     * Creates an instance of OperationError.
     * @param {string} operation
     * @param {string} [message]
     * @param {Error} [rootCause]
     * @memberof OperationError
     */
    function OperationError(operation, message, rootCause) {
        var _this = this;
        message = message || "UNKNOWN_ERROR";
        // if the rootCause has a .rootCause, use that so we don't deeply nest
        rootCause = getWithDefault(rootCause, "rootCause", rootCause);
        _this = _super.call(this, message) || this;
        _this.operation = operation;
        _this.name = "OperationError";
        _this.rootCause = rootCause;
        Object.setPrototypeOf(_this, OperationError.prototype);
        // using rootCause.stack ensures that the resulting error will have the original
        // message + call stack. If that's not an option, we create a new
        // stack... which is better than nothing, but it will look like
        // OperationError is the source of the error
        _this.stack = getWithDefault(rootCause, "stack", new Error().stack);
        return _this;
    }
    return OperationError;
}(Error));
export default OperationError;
//# sourceMappingURL=OperationError.js.map