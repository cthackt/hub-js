import { __awaiter, __generator } from "tslib";
/**
 * Parse a response object, and throw if it contains an error.
 * Just a wrapper to hide some platform idiosyncracies
 * @param {Response} response Response object to parse
 * @private
 */
export function _checkStatusAndParseJson(response) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (response.status >= 200 && response.status < 300) {
                // don't try to parse the body if it's empty
                // if (response.body) { // the fetch polyfill for IE... does not expose a body property... :(
                return [2 /*return*/, response.json()];
                // }
            }
            else {
                // we're gonna throw, but we need to construct the error
                return [2 /*return*/, response.json().then(function (json) {
                        if (json.error) {
                            var error = new Error(json.error.title + " :: " + json.error.detail + " :: " + response.status);
                            throw error;
                        }
                        else {
                            throw new Error("Got " + response.status + " " + response.statusText);
                        }
                    })];
            }
            return [2 /*return*/];
        });
    });
}
//# sourceMappingURL=_check-status-and-parse-json.js.map