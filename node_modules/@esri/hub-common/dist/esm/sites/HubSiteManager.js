import { __awaiter, __generator } from "tslib";
import HubError from "../HubError";
// Node has issues if this is not directly imported
import { ArcGISContextManager } from "../ArcGISContextManager";
import { updateSite, destroySite, createSite, _fetchSite, convertItemToSite, searchSites, } from "./HubSites";
import { setItemThumbnail as updateItemThumbnail } from "../items/setItemThumbnail";
var HubSiteManager = /** @class */ (function () {
    /**
     * Private so we can employ a factory function should we need
     * async work during creation
     * @param contextOrManager
     */
    function HubSiteManager(contextOrManager) {
        if (contextOrManager instanceof ArcGISContextManager) {
            this._contextManager = contextOrManager;
        }
        else {
            this._context = contextOrManager;
        }
    }
    /**
     * Factory function to construct a new HubProjectManager instance.
     *
     * Note: Used so that we could do async actions in the ctor.
     * @param contextOrManager
     * @returns
     */
    HubSiteManager.init = function (contextOrManager) {
        return new HubSiteManager(contextOrManager);
    };
    Object.defineProperty(HubSiteManager.prototype, "context", {
        /**
         * Getter to abstract how we store the context
         */
        get: function () {
            if (this._contextManager) {
                return this._contextManager.context;
            }
            else {
                return this._context;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create and store a new Site
     *
     * This also registers the item for oAuth and
     * registers domain names with the hub Domain system
     *
     * Sites are stored as Items in the Sharing API
     * @param site
     * @param requestOptions
     * @returns
     */
    HubSiteManager.prototype.create = function (site, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (requestOptions || this.context.isAuthenticated) {
                    // ammend in the orgUrlKey
                    if (!site.orgUrlKey) {
                        site.orgUrlKey = this.context.portal.urlKey;
                    }
                    return [2 /*return*/, createSite(site, requestOptions || this.context.hubRequestOptions)];
                }
                else {
                    throw new HubError("Create Site", "Creating Hub Sites requires authentication.");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Update a Site
     * @param site
     * @param requestOptions
     * @returns
     */
    HubSiteManager.prototype.update = function (site, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (requestOptions || this.context.isAuthenticated) {
                    return [2 /*return*/, updateSite(site, requestOptions || this.context.hubRequestOptions)];
                }
                else {
                    throw new HubError("Update Site", "Updating a Hub Site requires authentication.");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Destroy a Site
     * This permanently removes the backing Item,
     * and clears the domain entries for it.
     * @param id
     * @param requestOptions
     * @returns
     */
    HubSiteManager.prototype.destroy = function (id, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (requestOptions || this.context.isAuthenticated) {
                    return [2 /*return*/, destroySite(id, requestOptions || this.context.hubRequestOptions)];
                }
                else {
                    throw new HubError("Destroy Site", "Destroying Hub Sites requires authentication.");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Fetch a Site via Id, slug or domain
     *
     * This function does not require a user to be
     * authenticated, but it does require an `IRequestOptions`
     * which contains the portal instance to communicate with
     * @param identifier
     * @param requestOptions
     * @returns
     */
    HubSiteManager.prototype.fetch = function (identifier, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    if (requestOptions || this.context.hubRequestOptions) {
                        return [2 /*return*/, _fetchSite(identifier, requestOptions || this.context.hubRequestOptions)];
                    }
                    else {
                        throw new HubError("Fetch Site", "Can not retrieve context.hubRequestOptions from Context Manager. HubSiteManager is configured incorrectly.");
                    }
                }
                catch (ex) {
                    throw new HubError("Fetch Site", "Can not retrieve context.hubRequestOptions from Context Manager. HubSiteManager is configured incorrectly.", ex);
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Search for Sites
     *
     * @param filter
     * @param opts
     */
    HubSiteManager.prototype.search = function (filter, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // if we were not passed auth, and we have a session, use it
                if (!options.authentication && this.context.session) {
                    options.authentication = this.context.session;
                }
                return [2 /*return*/, searchSites(filter, options)];
            });
        });
    };
    /**
     * Set the thumbnail for the Site
     * @param id
     * @param file
     * @param filename
     * @param requestOptions
     * @returns
     */
    HubSiteManager.prototype.updateThumbnail = function (site, file, filename, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var ro;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ro = requestOptions || this.context.userRequestOptions;
                        return [4 /*yield*/, updateItemThumbnail(site.id, file, filename, ro)];
                    case 1:
                        _a.sent();
                        // get the item so we have updated props and timestamps
                        return [2 /*return*/, this.fetch(site.id, requestOptions)];
                }
            });
        });
    };
    /**
     * Convert a Hub Project Item to a IHubProject
     * @param item
     * @param requestOptions
     * @returns
     */
    HubSiteManager.prototype.fromItem = function (item, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var ro;
            return __generator(this, function (_a) {
                ro = requestOptions || this.context.userRequestOptions;
                return [2 /*return*/, convertItemToSite(item, ro)];
            });
        });
    };
    return HubSiteManager;
}());
export { HubSiteManager };
//# sourceMappingURL=HubSiteManager.js.map