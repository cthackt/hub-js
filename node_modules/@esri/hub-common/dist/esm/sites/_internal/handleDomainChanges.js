import { __assign, __awaiter, __generator } from "tslib";
import { getProp, removeDomainByHostname, addDomain, } from "../..";
/**
 * Given two site models, determine the domain changes and apply them
 * @param currentModel
 * @param updatedModel
 * @param requestOptions
 * @private
 */
export function handleDomainChanges(updatedModel, currentModel, requestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var defaultDomainRecord, domainChanges, domainChangePromises;
        return __generator(this, function (_a) {
            defaultDomainRecord = {
                clientKey: updatedModel.data.values.clientId,
                orgId: requestOptions.portalSelf.id,
                orgTitle: requestOptions.portalSelf.name,
                orgKey: requestOptions.portalSelf.urlKey,
                siteId: updatedModel.item.id,
                siteTitle: updatedModel.item.title,
                sslOnly: true,
            };
            domainChanges = {
                remove: [],
                add: [],
            };
            ["customHostname", "defaultHostname"].forEach(function (key) {
                var currentValue = getProp(currentModel, "data.values." + key);
                var updatedValue = getProp(updatedModel, "data.values." + key);
                if (updatedValue !== currentValue) {
                    domainChanges.remove.push(currentValue);
                    domainChanges.add.push(updatedValue);
                }
            });
            domainChangePromises = [];
            // handle additions
            domainChanges.add.map(function (hostname) {
                var domainOpts = __assign({ hostname: hostname }, defaultDomainRecord);
                domainChangePromises.push(addDomain(domainOpts, requestOptions));
            });
            // handle removals
            domainChanges.remove.map(function (hostname) {
                domainChangePromises.push(removeDomainByHostname(hostname, requestOptions));
            });
            return [2 /*return*/, Promise.all(domainChangePromises)];
        });
    });
}
//# sourceMappingURL=handleDomainChanges.js.map