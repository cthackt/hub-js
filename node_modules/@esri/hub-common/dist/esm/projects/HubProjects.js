import { __assign, __awaiter, __generator } from "tslib";
// Note - we separate these imports so we can cleanly spy on things in tests
import { createModel, fetchModelFromItem, getModel, updateModel, } from "../models";
import { constructSlug, getItemBySlug, getUniqueSlug, setSlugKeyword, } from "../items/slugs";
import { isGuid, cloneObject, mergeContentFilter, getItemThumbnailUrl, } from "..";
import { removeItem, getItem, } from "@esri/arcgis-rest-portal";
import { searchContentEntities } from "../search/_internal/searchContentEntities";
import { PropertyMapper } from "../core/_internal/PropertyMapper";
export var HUB_PROJECT_ITEM_TYPE = "Hub Project";
/**
 * Default values of a IHubProject
 */
var DEFAULT_PROJECT = {
    name: "No title provided",
    tags: [],
    typeKeywords: ["Hub Project"],
    status: "inactive",
};
/**
 * Default values for a new HubProject Model
 */
var DEFAULT_PROJECT_MODEL = {
    item: {
        type: HUB_PROJECT_ITEM_TYPE,
        title: "No Title Provided",
        description: "No Description Provided",
        snippet: "",
        tags: [],
        typeKeywords: ["Hub Project"],
        properties: {
            slug: "",
        },
    },
    data: {
        display: "about",
        timeline: {},
        status: "inactive",
        contacts: [],
        schemaVersion: 1,
    },
};
/**
 * Returns an Array of IPropertyMap objects
 * We could define these directly, but since the
 * properties of IHubProject map directly to properties
 * on item or data, it's slightly less verbose to
 * generate the structure.
 * @returns
 */
function getProjectPropertyMap() {
    var itemProps = [
        "created",
        "culture",
        "description",
        "extent",
        "id",
        "modified",
        "owner",
        "snippet",
        "tags",
        "typeKeywords",
        "url",
        "type",
    ];
    var dataProps = [
        "contacts",
        "display",
        "geometry",
        "headerImage",
        "layout",
        "location",
        "status",
    ];
    var map = [];
    itemProps.forEach(function (entry) {
        map.push({ objectKey: entry, modelKey: "item." + entry });
    });
    dataProps.forEach(function (entry) {
        map.push({ objectKey: entry, modelKey: "data." + entry });
    });
    // Deeper mappings
    map.push({
        objectKey: "slug",
        modelKey: "item.properties.slug",
    });
    map.push({
        objectKey: "orgUrlKey",
        modelKey: "item.properties.orgUrlKey",
    });
    map.push({
        objectKey: "name",
        modelKey: "item.title",
    });
    return map;
}
/**
 * Create a new Hub Project item
 *
 * Minimal properties are name and org
 *
 * @param project
 * @param requestOptions
 */
export function createProject(partialProject, requestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var project, _a, mapper, model, newProject;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    project = __assign(__assign({}, DEFAULT_PROJECT), partialProject);
                    // Create a slug from the title if one is not passed in
                    if (!project.slug) {
                        project.slug = constructSlug(project.name, project.orgUrlKey);
                    }
                    // Ensure slug is  unique
                    _a = project;
                    return [4 /*yield*/, getUniqueSlug({ slug: project.slug }, requestOptions)];
                case 1:
                    // Ensure slug is  unique
                    _a.slug = _b.sent();
                    // add slug to keywords
                    project.typeKeywords = setSlugKeyword(project.typeKeywords, project.slug);
                    mapper = new PropertyMapper(getProjectPropertyMap());
                    model = mapper.objectToModel(project, cloneObject(DEFAULT_PROJECT_MODEL));
                    return [4 /*yield*/, createModel(model, requestOptions)];
                case 2:
                    // create the item
                    model = _b.sent();
                    newProject = mapper.modelToObject(model, {});
                    // and return it
                    return [2 /*return*/, newProject];
            }
        });
    });
}
/**
 * Update a Hub Project
 * @param project
 * @param requestOptions
 */
export function updateProject(project, requestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, model, mapper, modelToUpdate, updatedModel, updatedProject;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    // verify that the slug is unique, excluding the current project
                    _a = project;
                    return [4 /*yield*/, getUniqueSlug({ slug: project.slug, existingId: project.id }, requestOptions)];
                case 1:
                    // verify that the slug is unique, excluding the current project
                    _a.slug = _b.sent();
                    return [4 /*yield*/, getModel(project.id, requestOptions)];
                case 2:
                    model = _b.sent();
                    mapper = new PropertyMapper(getProjectPropertyMap());
                    modelToUpdate = mapper.objectToModel(project, model);
                    return [4 /*yield*/, updateModel(modelToUpdate, requestOptions)];
                case 3:
                    updatedModel = _b.sent();
                    updatedProject = mapper.modelToObject(updatedModel, project);
                    // the casting is needed because modelToObject returns a `Partial<T>`
                    // where as this function returns a `T`
                    return [2 /*return*/, updatedProject];
            }
        });
    });
}
/**
 * Get a Hub Project by id or slug
 * @param identifier item id or slug
 * @param requestOptions
 */
export function fetchProject(identifier, requestOptions) {
    var getPrms;
    if (isGuid(identifier)) {
        // get item by id
        getPrms = getItem(identifier, requestOptions);
    }
    else {
        getPrms = getItemBySlug(identifier, requestOptions);
    }
    return getPrms.then(function (item) {
        if (!item)
            return null;
        return convertItemToProject(item, requestOptions);
    });
}
/**
 * Remove a Hub Project
 * @param id
 * @param requestOptions
 */
export function destroyProject(id, requestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var ro;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ro = __assign(__assign({}, requestOptions), { id: id });
                    return [4 /*yield*/, removeItem(ro)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Search for Projects, and get IHubProject results
 *
 * Different from `searchContent` in that this returns the specific entity type
 *
 * @param filter
 * @param options
 * @returns
 */
export function searchProjects(filter, options) {
    return __awaiter(this, void 0, void 0, function () {
        var scopingFilter, projectFilter;
        return __generator(this, function (_a) {
            scopingFilter = {
                filterType: "content",
                type: {
                    exact: ["Hub Project"],
                },
            };
            projectFilter = mergeContentFilter([scopingFilter, filter]);
            return [2 /*return*/, searchContentEntities(projectFilter, convertItemToProject, options)];
        });
    });
}
/**
 * Convert an Hub Project Item into a Hub Project, fetching any additional
 * information that may be required
 * @param item
 * @param auth
 * @returns
 */
export function convertItemToProject(item, requestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var model, mapper, token, session, prj;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetchModelFromItem(item, requestOptions)];
                case 1:
                    model = _a.sent();
                    mapper = new PropertyMapper(getProjectPropertyMap());
                    if (requestOptions.authentication) {
                        session = requestOptions.authentication;
                        token = session.token;
                    }
                    prj = mapper.modelToObject(model, {});
                    prj.thumbnailUrl = getItemThumbnailUrl(model.item, requestOptions, token);
                    return [2 /*return*/, prj];
            }
        });
    });
}
//# sourceMappingURL=HubProjects.js.map