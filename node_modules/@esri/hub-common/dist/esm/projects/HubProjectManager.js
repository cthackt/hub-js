import { __awaiter, __generator } from "tslib";
import { createProject, updateProject, destroyProject, fetchProject, searchProjects, convertItemToProject, } from "./HubProjects";
// Node has issues if this is not directly imported
import { ArcGISContextManager } from "../ArcGISContextManager";
import { HubError, } from "..";
import { setItemThumbnail as updateItemThumbnail } from "../items/setItemThumbnail";
/**
 * Centralized functions used to manage IHubProject instances
 *
 * This class is a convenience wrapper over util functions which
 * are also directly accessible for use in scenarios where
 * classes are inconvenient.
 */
var HubProjectManager = /** @class */ (function () {
    /**
     * Private so we can employ a factory function should we need
     * async work during creation
     * @param contextOrManager
     */
    function HubProjectManager(contextOrManager) {
        if (contextOrManager instanceof ArcGISContextManager) {
            this._contextManager = contextOrManager;
        }
        else {
            this._context = contextOrManager;
        }
    }
    /**
     * Factory function to construct a new HubProjectManager instance.
     *
     * Note: Used so that we could do async actions in the ctor.
     * @param contextOrManager
     * @returns
     */
    HubProjectManager.init = function (contextOrManager) {
        return new HubProjectManager(contextOrManager);
    };
    Object.defineProperty(HubProjectManager.prototype, "context", {
        /**
         * Getter to abstract how we store the context
         */
        get: function () {
            if (this._contextManager) {
                return this._contextManager.context;
            }
            else {
                return this._context;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create and store new project.
     *
     * Projects are stored as Items in the Sharing API
     * @param project
     * @param requestOptions
     * @returns
     */
    HubProjectManager.prototype.create = function (project, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (requestOptions || this.context.isAuthenticated) {
                    // ammend in the orgUrlKey
                    if (!project.orgUrlKey) {
                        project.orgUrlKey = this.context.portal.urlKey;
                    }
                    return [2 /*return*/, createProject(project, requestOptions || this.context.userRequestOptions)];
                }
                else {
                    throw new HubError("Create Project", "Creating Hub Projects requires authentication.");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Update a project
     * @param project
     * @param requestOptions
     * @returns
     */
    HubProjectManager.prototype.update = function (project, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (requestOptions || this.context.isAuthenticated) {
                    return [2 /*return*/, updateProject(project, requestOptions || this.context.userRequestOptions)];
                }
                else {
                    throw new HubError("Update Project", "Updating Hub Projects requires authentication.");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Destroy a project.
     * This permanently removes the backing Item
     * @param id
     * @param requestOptions
     * @returns
     */
    HubProjectManager.prototype.destroy = function (id, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (requestOptions || this.context.isAuthenticated) {
                    return [2 /*return*/, destroyProject(id, requestOptions || this.context.userRequestOptions)];
                }
                else {
                    throw new HubError("Destroy Project", "Destroying Hub Projects requires authentication.");
                }
                return [2 /*return*/];
            });
        });
    };
    // DEPRECATED IN FAVOR OF .fetch()
    // TODO: REMOVE AT NEXT MAJOR
    /* istanbul ignore next */
    HubProjectManager.prototype.get = function (identifier, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // tslint:disable-next-line
                console.warn("HubProjectManager.get is deprecated and will be removed. Use .fetch() instead.");
                return [2 /*return*/, this.fetch(identifier, requestOptions)];
            });
        });
    };
    /**
     * Fetch a Project via id or it's slug
     *
     * This function does not require a user to be
     * authenticated, but it does require an `IRequestOptions`
     * which contains the portal instance to communicate with
     * @param identifier
     * @param requestOptions
     * @returns
     */
    HubProjectManager.prototype.fetch = function (identifier, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (requestOptions || this.context.requestOptions) {
                    return [2 /*return*/, fetchProject(identifier, requestOptions || this.context.requestOptions)];
                }
                else {
                    throw new HubError("Fetch Project", "Can not retrieve context.requestOptions from Context Manager. HubProjectManager is configured incorrectly.");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Search for Projects
     *
     * @param filter
     * @param options
     */
    HubProjectManager.prototype.search = function (filter, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // if we were not passed auth, and we have a session, use it
                if (!options.authentication && this.context.session) {
                    options.authentication = this.context.session;
                }
                return [2 /*return*/, searchProjects(filter, options)];
            });
        });
    };
    /**
     * Set the thumbnail for the Project
     * @param id
     * @param file
     * @param filename
     * @param requestOptions
     * @returns
     */
    HubProjectManager.prototype.updateThumbnail = function (project, file, filename, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var ro;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ro = requestOptions || this.context.userRequestOptions;
                        return [4 /*yield*/, updateItemThumbnail(project.id, file, filename, ro)];
                    case 1:
                        _a.sent();
                        // get the item so we have updated props and timestamps
                        return [2 /*return*/, this.fetch(project.id, requestOptions)];
                }
            });
        });
    };
    /**
     * Convert a Hub Project Item to a IHubProject
     * @param item
     * @param requestOptions
     * @returns
     */
    HubProjectManager.prototype.fromItem = function (item, requestOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var ro;
            return __generator(this, function (_a) {
                ro = requestOptions || this.context.userRequestOptions;
                return [2 /*return*/, convertItemToProject(item, ro)];
            });
        });
    };
    return HubProjectManager;
}());
export { HubProjectManager };
//# sourceMappingURL=HubProjectManager.js.map