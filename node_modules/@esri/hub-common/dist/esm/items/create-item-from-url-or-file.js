import { __assign, __awaiter, __generator, __rest } from "tslib";
import { setItemAccess, shareItemWithGroup, } from "@esri/arcgis-rest-portal";
import { failSafe, isUpdateGroup } from "../utils";
import { createItemFromFile } from "./create-item-from-file";
import { createItemFromUrl } from "./create-item-from-url";
import { _waitForItemReady } from "./_internal/_wait-for-item-ready";
/**
 * Creates an item in online from either url or file.
 * Once created we wait for the item to be ready (or throw an error if creation failed)
 * If access is not private then we make a call to update that.
 *
 * @export
 * @param {ICreateItemFromUrlOrFileOptions} createItemFromUrlOrFileOptions Input params (item, groups?, requestoptions)
 * @return {*}  {Promise<string>} AGO item id
 */
export function createItemFromUrlOrFile(createItemFromUrlOrFileOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var item, groups, userRequestOptions, shouldWaitForItemReady, createdItem, failSafeShare_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    item = createItemFromUrlOrFileOptions.item, groups = createItemFromUrlOrFileOptions.groups, userRequestOptions = __rest(createItemFromUrlOrFileOptions, ["item", "groups"]);
                    shouldWaitForItemReady = item.dataUrl || item.file;
                    if (!item.file) return [3 /*break*/, 2];
                    return [4 /*yield*/, createItemFromFile(item, userRequestOptions)];
                case 1:
                    createdItem = _a.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, createItemFromUrl(item, userRequestOptions)];
                case 3:
                    createdItem = _a.sent();
                    _a.label = 4;
                case 4:
                    if (!shouldWaitForItemReady) return [3 /*break*/, 6];
                    return [4 /*yield*/, _waitForItemReady(createdItem.id, userRequestOptions)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6:
                    if (!(item.access !== "private")) return [3 /*break*/, 8];
                    return [4 /*yield*/, setItemAccess(__assign({ id: createdItem.id, owner: item.owner, access: item.access }, userRequestOptions))];
                case 7:
                    _a.sent();
                    _a.label = 8;
                case 8:
                    if (!(groups === null || groups === void 0 ? void 0 : groups.length)) return [3 /*break*/, 10];
                    failSafeShare_1 = failSafe(shareItemWithGroup);
                    return [4 /*yield*/, Promise.all(groups.map(function (group) {
                            return failSafeShare_1(__assign({ id: createdItem.id, owner: item.owner, groupId: group.id, confirmItemControl: isUpdateGroup(group) }, userRequestOptions));
                        }))];
                case 9:
                    _a.sent();
                    _a.label = 10;
                case 10: return [2 /*return*/, createdItem];
            }
        });
    });
}
//# sourceMappingURL=create-item-from-url-or-file.js.map