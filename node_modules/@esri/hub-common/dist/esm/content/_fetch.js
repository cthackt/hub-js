import { __assign, __awaiter, __generator } from "tslib";
import { getEnrichmentErrors, } from "../items/_enrichments";
import { hubApiRequest } from "../request";
import { isMapOrFeatureServerUrl } from "../urls";
import { cloneObject } from "../util";
import { includes } from "../utils";
import { normalizeItemType } from "./compose";
import { getFamily } from "./get-family";
import { parseDatasetId } from "./slugs";
// TODO: need to fetch data for client-side layer views as well
// determine if we should fetch data for an item
var shouldFetchData = function (item) {
    var type = normalizeItemType(item);
    var family = getFamily(type);
    var dataFamilies = ["template", "solution"];
    var dataTypes = ["Web Map", "Web Scene"];
    return includes(dataFamilies, family) || includes(dataTypes, type);
};
/**
 * get the default list of enrichments to fetch for content
 * @param item
 * @returns the default list of enrichments to fetch for content
 * @private
 */
export var getContentEnrichments = function (item) {
    // we fetch these enrichments for all content types
    var enrichments = [
        "groupIds",
        "metadata",
        "ownerUser",
        "org",
    ];
    // we only fetch data for certain content
    if (shouldFetchData(item)) {
        enrichments.push("data");
    }
    // we fetch server and layers for map and feature services
    return isMapOrFeatureServerUrl(item.url)
        ? enrichments.concat("server", "layers")
        : enrichments;
};
// build up request options to only include the above enrichments
// that we fetch from the Hub API, and to optionally filter by slug
var getHubEnrichmentsOptions = function (requestOptions, slug) {
    var opts = cloneObject(requestOptions);
    opts.params = __assign(__assign({}, opts.params), { 
        // TODO: we should fetch errors too
        "fields[datasets]": "slug,boundary,extent,searchDescription,statistics" });
    if (slug) {
        opts.params["filter[slug]"] = slug;
    }
    return opts;
};
// extract the ids and enrichments from the Hub API response
var getDatasetEnrichments = function (dataset) {
    var _a = parseDatasetId(dataset.id), itemId = _a.itemId, layerIdString = _a.layerId;
    var layerId = layerIdString && parseInt(layerIdString, 10);
    var _b = dataset.attributes, slug = _b.slug, boundary = _b.boundary, extent = _b.extent, searchDescription = _b.searchDescription, statistics = _b.statistics;
    return {
        itemId: itemId,
        layerId: layerId,
        slug: slug,
        boundary: boundary,
        extent: extent,
        searchDescription: searchDescription,
        statistics: statistics,
    };
};
/**
 * fetch enrichment from the Hub API by slug
 * @param slug
 * @param requestOptions
 * @returns enrichments from the Hub API (slug, boundary, statistic, etc)
 * @private
 */
export var fetchHubEnrichmentsBySlug = function (slug, requestOptions) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, hubApiRequest("/datasets", getHubEnrichmentsOptions(requestOptions, slug))];
            case 1:
                response = _a.sent();
                return [2 /*return*/, getDatasetEnrichments(response.data[0])];
        }
    });
}); };
/**
 * fetch enrichment from the Hub API by id
 * @param slug
 * @param requestOptions
 * @returns enrichments from the Hub API (slug, boundary, statistic, etc)
 * @private
 */
export var fetchHubEnrichmentsById = function (hubId, requestOptions) { return __awaiter(void 0, void 0, void 0, function () {
    var response, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, hubApiRequest("/datasets/" + hubId, getHubEnrichmentsOptions(requestOptions))];
            case 1:
                response = _a.sent();
                return [2 /*return*/, getDatasetEnrichments(response.data)];
            case 2:
                e_1 = _a.sent();
                // dataset record not found, just log the error
                // b/c we can still look up the item and enrichments by id
                return [2 /*return*/, { errors: getEnrichmentErrors(e_1) }];
            case 3: return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=_fetch.js.map