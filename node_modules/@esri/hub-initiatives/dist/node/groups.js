"use strict";
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSharedEditingGroup = exports.getUniqueGroupName = exports.checkGroupExists = exports.removeInitiativeGroup = exports.createInitiativeGroup = void 0;
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
/**
 * Create an initiative collaboration or open data group
 * Note: This does not ensure a group with the proposed name does not exist. Please use
 * `checkGroupExists
 *
 * @export
 * @param {string} name
 * @param {string} description
 * @param {*} options {isOpenData: boolean, isSharedEditing: boolean}
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<IInitiativeModel>}
 */
function createInitiativeGroup(name, description, options, requestOptions) {
    const group = {
        title: name,
        description,
        access: "org",
        sortField: "title",
        sortOrder: "asc",
    };
    if (options.isOpenData) {
        group.isOpenData = true;
        group.tags = ["Hub Initiative Group", "Open Data"];
        group.access = "public";
    }
    if (options.isSharedEditing) {
        group.capabilities = "updateitemcontrol";
        group._edit_privacy = "on";
        group._edit_contributors = "on";
        group.tags = ["Hub Initiative Group", "initiativeCollaborationGroup"];
    }
    const createOpts = Object.assign({ group }, requestOptions);
    // The protect call does not return the groupId, but we need to return it
    // from this function, so we create a var in this scope to hold it...
    let groupId;
    // create the group
    return arcgis_rest_portal_1.createGroup(createOpts)
        .then((result) => {
        groupId = result.group.id;
        // protect it
        const protectOpts = Object.assign({ id: groupId }, requestOptions);
        return arcgis_rest_portal_1.protectGroup(protectOpts);
    })
        .then(() => {
        return groupId;
    });
}
exports.createInitiativeGroup = createInitiativeGroup;
/**
 * Remove an Initiative group.
 * This assumes the group is protected
 *
 * @export
 * @param {string} id
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<any>}
 */
function removeInitiativeGroup(id, requestOptions) {
    const opts = Object.assign({ id }, requestOptions);
    return arcgis_rest_portal_1.unprotectGroup(opts).then(() => {
        return arcgis_rest_portal_1.removeGroup(opts);
    }, (ex) => {
        // check if the failure is b/c the group does not exist...
        if (ex.messageCode === "COM_0003" && ex.code === 400) {
            return Promise.resolve({ success: true });
        }
        else {
            throw ex;
        }
    });
}
exports.removeInitiativeGroup = removeInitiativeGroup;
/**
 * Check if a group with a specific title exists in an org
 * If it does exist, and has the correct properties, we return the
 * @export
 * @param {string} title
 * @param {string} orgId
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<boolean>}
 */
function checkGroupExists(title, orgId, requestOptions) {
    const options = Object.assign({ q: `(orgid: ${orgId}`, filter: `title:"${title}"` }, requestOptions);
    return arcgis_rest_portal_1.searchGroups(options).then((response) => {
        const result = {
            exists: false,
        };
        if (response.total > 0) {
            result.exists = true;
            result.group = response.results[0];
        }
        return result;
    });
}
exports.checkGroupExists = checkGroupExists;
/**
 * Group names must be unique within an organization
 *
 * @export
 * @param {string} title
 * @param {string} orgId
 * @param {number} [step=0]
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<string>}
 */
function getUniqueGroupName(title, orgId, step, requestOptions) {
    let proposedName = title;
    if (step) {
        proposedName = `${title} - ${step}`;
    }
    return checkGroupExists(proposedName, orgId, requestOptions).then((result) => {
        if (result.exists) {
            // increment the step...
            step = step + 1;
            return getUniqueGroupName(title, orgId, step, requestOptions);
        }
        else {
            return proposedName;
        }
    });
}
exports.getUniqueGroupName = getUniqueGroupName;
function isSharedEditingGroup(group) {
    return !!(group.capabilities.indexOf("updateitemcontrol") > -1);
}
exports.isSharedEditingGroup = isSharedEditingGroup;
//# sourceMappingURL=groups.js.map