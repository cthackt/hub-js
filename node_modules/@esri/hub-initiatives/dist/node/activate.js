"use strict";
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.activateInitiative = void 0;
const hub_common_1 = require("@esri/hub-common");
const get_1 = require("./get");
const templates_1 = require("./templates");
const add_1 = require("./add");
const util_1 = require("./util");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const hub_common_2 = require("@esri/hub-common");
/**
 * Activate an Initiative
 * Creates an instance of an Initiative, based on an Initiative Template.
 *
 * @export
 * @param {string | any} template Initiative Template item or Id
 * @param {string} title
 * @param {any} groupIds hash of group props and ids
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<IInitiativeModel>}
 * @private
 */
function activateInitiative(template, title, groupIds, requestOptions) {
    // make a copy of the request options so we can mutate things if needed...
    const ro = Object.assign({}, requestOptions);
    // create a state container to hold things we accumulate through the various promises
    const state = {
        initiativeKey: hub_common_1.camelize(title)
    };
    let promise;
    if (typeof template === "string") {
        promise = get_1.getInitiative(template, ro);
    }
    else {
        promise = Promise.resolve(template);
    }
    return promise
        .then(async (templateItemModel) => {
        state.template = templateItemModel;
        // construct the options...
        const options = {
            title,
            description: title,
            initiativeKey: state.initiativeKey,
            groupIds
        };
        // cook the template...
        state.initiativeModel = templates_1.createInitiativeModelFromTemplate(state.template, options);
        // now save it...
        return add_1.addInitiative(state.initiativeModel, ro);
    })
        .then((newModel) => {
        state.initiativeModel = newModel;
        const assets = hub_common_2.getProp(state, "template.assets");
        if (assets) {
            return util_1.copyEmbeddedImageResources(newModel.item.id, newModel.item.owner, assets, ro);
        }
        else {
            const { id, owner } = newModel.item;
            const wellKnownAssets = [
                "detail-image.jpg",
                "icon-dark.png",
                "icon-light.png"
            ];
            // now copy assets from the parent initiative...
            return util_1.copyImageResources(state.template.item.id, id, owner, wellKnownAssets, ro);
        }
    })
        .then(() => {
        const collaborationGroupId = hub_common_2.getProp(state, "initiativeModel.item.properties.collaborationGroupId");
        if (collaborationGroupId) {
            // create sharing options and share to the core team
            const shareOptions = Object.assign({ id: state.initiativeModel.item.id, groupId: collaborationGroupId, confirmItemControl: true }, requestOptions);
            return arcgis_rest_portal_1.shareItemWithGroup(shareOptions);
        }
        else {
            return Promise.resolve({ success: true });
        }
    })
        .then(() => {
        return state.initiativeModel;
    });
}
exports.activateInitiative = activateInitiative;
//# sourceMappingURL=activate.js.map