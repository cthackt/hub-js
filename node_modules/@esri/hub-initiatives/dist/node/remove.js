"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeInitiative = void 0;
const groups_1 = require("./groups");
const get_1 = require("./get");
const detach_site_1 = require("./detach-site");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const hub_common_1 = require("@esri/hub-common");
/**
 * Remove an Initiative, and its associated groups.
 * If the initiative has a site, it will be shared to
 * the organization's main collaboration group
 * @export
 * @param {string} id
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<any>}
 */
function removeInitiative(id, requestOptions) {
    const state = {
        id
    };
    const processId = hub_common_1.createId("remove-");
    const startTS = new Date().getTime();
    // first get the item, because we need to also remove the
    // collaboration and open data groups...
    // and the Portal because w need the org's default
    // collaboration group id
    return Promise.all([
        get_1.getInitiative(id, requestOptions),
        arcgis_rest_portal_1.getSelf(requestOptions)
    ])
        .then(async (results) => {
        const model = results[0];
        const portal = results[1];
        const siteId = model.item.properties.siteId;
        if (siteId) {
            try {
                await arcgis_rest_portal_1.getItem(siteId, requestOptions);
                state.hasSite = true;
                state.siteId = siteId;
            }
            catch (e) {
                state.hasSite = false;
            }
        }
        else {
            state.hasSite = false;
        }
        state.initiativeOwner = model.item.owner;
        state.collaborationGroupId = hub_common_1.getProp(portal, "properties.openData.settings.groupId");
        // remove the groups...
        const prms = [];
        ["collaborationGroupId", "contentGroupId", "followersGroupId"].forEach(prop => {
            if (model.item.properties[prop]) {
                prms.push(groups_1.removeInitiativeGroup(model.item.properties[prop], requestOptions).catch(() => Promise.resolve(true)) // swallow group delete failures
                );
            }
        });
        // if the item is protected, un-protect it...
        if (model.item.protected) {
            const opts = Object.assign({ id }, requestOptions);
            prms.push(arcgis_rest_portal_1.unprotectItem(opts));
        }
        return Promise.all(prms);
    })
        .then(() => {
        const prms = [];
        const opts = Object.assign({ id, owner: state.initiativeOwner }, requestOptions);
        prms.push(arcgis_rest_portal_1.removeItem(opts));
        // if we have a site, let's detach it from the initiative
        if (state.hasSite) {
            prms.push(detach_site_1.detachSiteFromInitiative(state.siteId, state.collaborationGroupId, requestOptions));
        }
        return Promise.all(prms);
    })
        .then(() => {
        return { success: true };
    });
}
exports.removeInitiative = removeInitiative;
//# sourceMappingURL=remove.js.map