"use strict";
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInitiative = exports.convertIndicatorsToDefinitions = void 0;
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const hub_common_1 = require("@esri/hub-common");
const migrator_1 = require("./migrator");
const upgrade_two_dot_zero_1 = require("./migrations/upgrade-two-dot-zero");
Object.defineProperty(exports, "convertIndicatorsToDefinitions", { enumerable: true, get: function () { return upgrade_two_dot_zero_1.convertIndicatorsToDefinitions; } });
/**
 * ```js
 * getInitiative('3ef...')
 *  .then(initiativeModel => {
 *    // work with the initiative model
 *  })
 * ```
 * Get the initiative item + data in one call. This will also apply schema upgrades
 *
 *
 * @param id - Initiative Item Id
 * @param requestOptions - Initiative request options that may have authentication manager
 * @returns A Promise that will resolve with the Initiative item and data
 * @export
 */
function getInitiative(id, requestOptions) {
    // if we have specifically requested the data...
    return Promise.all([
        arcgis_rest_portal_1.getItem(id, requestOptions),
        arcgis_rest_portal_1.getItemData(id, requestOptions)
    ])
        .then(result => {
        // shape this into a model
        return {
            item: result[0],
            data: result[1]
        };
    })
        .then(model => {
        return migrator_1.migrateSchema(model, hub_common_1.getPortalApiUrl(requestOptions));
    });
}
exports.getInitiative = getInitiative;
//# sourceMappingURL=get.js.map