"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInitiativeModelFromTemplate = void 0;
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
const hub_common_1 = require("@esri/hub-common");
const migrator_1 = require("./migrator");
const add_1 = require("./add");
/**
 * Given an Initiative Template model, create a new Initiative model
 * Note: this does not save the model. It just sets up the new model.
 *
 * @export
 * @param {IInitiativeModel} template
 * @param {*} options
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<IInitiativeModel>}
 */
function createInitiativeModelFromTemplate(template, options) {
    // start by making deep clone of the template...
    const model = {
        item: hub_common_1.cloneObject(template.item),
        data: {}
    };
    model.item.title = options.title;
    model.item.tags = ["Hub Initiative"];
    // ensure we use the current type
    model.item.type = add_1.INITIATIVE_TYPE_NAME;
    // Assign the typeKeywords: remove hubInitiativeTemplate and add hubInitiative
    model.item.typeKeywords = hub_common_1.without(model.item.typeKeywords, "hubInitiativeTemplate");
    model.item.typeKeywords.push("hubInitiative");
    // remove things that are irrelevant or are set server-side
    ["id", "owner", "created_at", "modified_at"].forEach(prop => delete model.item[prop]);
    // we store a bunch of Ids in here so we can avoid fetching /data for common interactions
    model.item.properties = {
        source: template.item.id,
        schemaVersion: migrator_1.CURRENT_SCHEMA_VERSION,
        initialParent: template.item.id
    };
    Object.assign(model.item.properties, options.groupIds); // add the groupIds
    // we create a new .data node so we're cleaning rogue properties as we go
    model.data = {
        assets: hub_common_1.cloneObject(template.data.assets),
        steps: hub_common_1.cloneObject(template.data.steps),
        indicators: [],
        source: template.item.id,
        values: {
            initiativeKey: options.initiativeKey,
            bannerImage: hub_common_1.cloneObject(template.data.values.bannerImage)
        }
    };
    // if recommended exists, copy it over
    if (hub_common_1.getProp(template, "data.recommendedTemplates")) {
        model.data.recommendedTemplates = template.data.recommendedTemplates;
    }
    Object.assign(model.data.values, options.groupIds); // add the groupIds, TODO stop storing groupIds in data.values
    // just in case the template does not have a banner image defined...
    if (!model.data.values.bannerImage) {
        model.data.values.bannerImage = {
            source: "bannerImage",
            display: {
                position: { x: "50%", y: "10%" }
            }
        };
    }
    return model;
}
exports.createInitiativeModelFromTemplate = createInitiativeModelFromTemplate;
//# sourceMappingURL=templates.js.map