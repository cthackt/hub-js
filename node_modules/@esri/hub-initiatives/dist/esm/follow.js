import { __spreadArrays } from "tslib";
import { request } from "@esri/arcgis-rest-request";
import { getUserUrl, joinGroup, leaveGroup } from "@esri/arcgis-rest-portal";
import { getProp, unique } from "@esri/hub-common";
import { getInitiative } from "./get";
var getUserTag = function (initiativeId) { return "hubInitiativeId|" + initiativeId; };
var initiativeIdFromUserTag = function (tag) {
    return tag.replace(/^hubInitiativeId\|/, "");
};
var initiativeIdFromGroupTag = function (tag) {
    return tag.replace(/^hubInitiativeFollowers\|/, "");
};
var getUpdateUrl = function (session) { return getUserUrl(session) + "/update"; };
var currentlyFollowedInitiativesByUserTag = function (user) {
    return user.tags.map(initiativeIdFromUserTag);
};
var currentlyFollowedInitiativesByGroupMembership = function (user) {
    return user.groups
        .map(function (group) { return group.tags; })
        .reduce(function (acc, item) { return acc.concat(item); }, [])
        .filter(function (tags) { return tags.indexOf("hubInitiativeFollowers|") === 0; })
        .map(initiativeIdFromGroupTag);
};
export var currentlyFollowedInitiatives = function (user) {
    var byUserTags = currentlyFollowedInitiativesByUserTag(user);
    var byGroupMembership = currentlyFollowedInitiativesByGroupMembership(user);
    return __spreadArrays(byUserTags, byGroupMembership).filter(unique);
};
export var isUserFollowing = function (user, initiativeId) {
    return currentlyFollowedInitiatives(user).indexOf(initiativeId) > -1;
};
/**
 * ```js
 * import { followInitiative } from "@esri/hub-initiatives";
 * //
 * followInitiative({
 *   initiativeId,
 *   authentication
 * })
 *   .then(response)
 * ```
 * Follow an initiative.
 */
export function followInitiative(requestOptions) {
    // we dont call getUser() because the tags are cached and will be mutating
    return request(getUserUrl(requestOptions.authentication), {
        authentication: requestOptions.authentication
    })
        .then(function (user) {
        // don't update if already following
        if (isUserFollowing(user, requestOptions.initiativeId)) {
            return Promise.reject("user is already following this initiative.");
        }
        // if not already following, pass the user on
        return user;
    })
        .then(function (user) {
        return getInitiative(requestOptions.initiativeId, requestOptions).then(function (initiative) { return ({
            user: user,
            initiative: initiative,
            hasFollowersGroup: false
        }); });
    })
        .then(function (obj) {
        // if the initiative has a followersGroupId
        var groupId = getProp(obj, "initiative.item.properties.followersGroupId");
        if (groupId) {
            // attempt to join it
            return joinGroup({
                id: groupId,
                authentication: requestOptions.authentication
            }).then(function (groupJoinResponse) {
                obj.hasFollowersGroup = groupJoinResponse.success;
                return obj;
            });
        }
        return obj;
    })
        .then(function (obj) {
        if (!obj.hasFollowersGroup) {
            // else add the tag to the user
            var tag = getUserTag(requestOptions.initiativeId);
            var tags = JSON.parse(JSON.stringify(obj.user.tags));
            tags.push(tag);
            return request(getUpdateUrl(requestOptions.authentication), {
                params: { tags: tags },
                authentication: requestOptions.authentication
            });
        }
        // the initiative has a followers group and we successfully joined it
        return { success: true, username: obj.user.username };
    });
}
/**
 * ```js
 * import { unfollowInitiative } from "@esri/hub-initiatives";
 * //
 * unfollowInitiative({
 *   initiativeId,
 *   authentication
 * })
 *   .then(response)
 * ```
 * Un-follow an initiative.
 */
export function unfollowInitiative(requestOptions) {
    // we dont call getUser() because the tags are cached and will be mutating
    return request(getUserUrl(requestOptions.authentication), {
        authentication: requestOptions.authentication
    })
        .then(function (user) {
        // don't update if not already following
        if (!isUserFollowing(user, requestOptions.initiativeId)) {
            return Promise.reject("user is not following this initiative.");
        }
        // if already following, pass the user on
        return user;
    })
        .then(function (user) {
        var tag = getUserTag(requestOptions.initiativeId);
        var tags = JSON.parse(JSON.stringify(user.tags));
        if (tags.indexOf(tag) > -1) {
            // https://stackoverflow.com/questions/9792927/javascript-array-search-and-remove-string
            var index = tags.indexOf(tag);
            tags.splice(index, 1);
            // clear the last tag by passing ",".
            if (tags.length === 0) {
                tags.push(",");
            }
            return request(getUpdateUrl(requestOptions.authentication), {
                params: { tags: tags },
                authentication: requestOptions.authentication
            }).then(function (_) { return user; });
        }
        return user;
    })
        .then(function (user) {
        return getInitiative(requestOptions.initiativeId, requestOptions).then(function (initiative) { return ({ user: user, initiative: initiative }); });
    })
        .then(function (obj) {
        // if there is an initiative followers group and the user is a member, attempt to leave it
        var groupId = getProp(obj, "initiative.item.properties.followersGroupId");
        if (groupId &&
            currentlyFollowedInitiativesByGroupMembership(obj.user).indexOf(requestOptions.initiativeId) > -1) {
            return leaveGroup({
                id: groupId,
                authentication: requestOptions.authentication
            }).then(function (groupLeaveResponse) {
                return { success: true, username: obj.user.username };
            });
        }
        return { success: true, username: obj.user.username };
    });
}
//# sourceMappingURL=follow.js.map