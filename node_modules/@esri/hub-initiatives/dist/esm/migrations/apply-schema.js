/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
import { getProp, cloneObject } from "@esri/hub-common";
/**
 * Applies the initial version of the Initiaive schema to the model.
 * If `model.item.properties.schemaVersion >= 1` the original object
 * will be returned. Otherwise a new object with the updated schema
 * is returned.
 *
 * @protected
 * @param {IInitiativeModel} model Initiative Model
 * @param {string} [portalUrl] Url to the Portal. Defauls to `www.arcgis.com`
 * @returns {IInitiativeModel}
 */
export function applyInitialSchema(model, portalUrl) {
    var curVersion = getProp(model, "item.properties.schemaVersion");
    // if no current version or it's below 1
    if (!curVersion || curVersion < 1) {
        // clone the model because we play by immutable rules
        var clone_1 = cloneObject(model);
        // console.debug(`------- CLONE ---------`);
        // console.debug(JSON.stringify(clone, null, 2));
        // console.debug(`------- CLONE ---------`);
        // ensure some properties exist...
        if (!clone_1.data.values) {
            clone_1.data.values = {};
        }
        if (!clone_1.item.properties) {
            clone_1.item.properties = {};
        }
        // set the schema version...
        clone_1.item.properties.schemaVersion = 1.0;
        var isTemplate_1 = false;
        if (clone_1.item.typeKeywords) {
            isTemplate_1 =
                clone_1.item.typeKeywords.indexOf("hubInitiativeTemplate") >= 0;
        }
        // ensure source is in item.properties if it has a parent...
        var hasParent = !!clone_1.data.source;
        if (hasParent && clone_1.item.properties.source !== clone_1.data.source) {
            clone_1.item.properties.source = clone_1.data.source;
        }
        // convert configuratinSettings to steps array...
        // NOTE: this is only for 'templates', or Custom Initiatives
        if (clone_1.data.configurationSettings) {
            var config = cloneObject(clone_1.data.configurationSettings);
            delete clone_1.data.configurationSettings;
            // get the steps entry...
            var stepCategory = config.find(function (el) {
                return el.category === "Steps";
            });
            // hoist step names into an array
            clone_1.data.values.steps = stepCategory.fields.map(function (entry) {
                return entry.fieldName;
            });
            // move the label and tooltip to title and description, in the values.<fieldName> prop
            stepCategory.fields.forEach(function (entry) {
                // ensure values prop exists...
                if (!clone_1.data.values[entry.fieldName]) {
                    clone_1.data.values[entry.fieldName] = {};
                }
                // assign in values
                clone_1.data.values[entry.fieldName].title = entry.label;
                clone_1.data.values[entry.fieldName].description = entry.tooltip;
                clone_1.data.values[entry.fieldName].id = entry.fieldName;
                // if a .items array exists, rename that to .templates
                if (clone_1.data.values[entry.fieldName].items) {
                    // if this is a template, then move items to templates...
                    if (isTemplate_1) {
                        clone_1.data.values[entry.fieldName].templates =
                            clone_1.data.values[entry.fieldName].items;
                        delete clone_1.data.values[entry.fieldName].items;
                    }
                }
                else {
                    // ensure empty arrays
                    clone_1.data.values[entry.fieldName].items = [];
                    clone_1.data.values[entry.fieldName].templates = [];
                }
            });
        }
        return clone_1;
    }
    else {
        return model;
    }
}
//# sourceMappingURL=apply-schema.js.map