import { __assign, __awaiter, __generator } from "tslib";
import { removeInitiativeGroup } from "./groups";
import { getInitiative } from "./get";
import { detachSiteFromInitiative } from "./detach-site";
import { getItem, removeItem, unprotectItem, getSelf } from "@esri/arcgis-rest-portal";
import { getProp, createId } from "@esri/hub-common";
/**
 * Remove an Initiative, and its associated groups.
 * If the initiative has a site, it will be shared to
 * the organization's main collaboration group
 * @export
 * @param {string} id
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<any>}
 */
export function removeInitiative(id, requestOptions) {
    var _this = this;
    var state = {
        id: id
    };
    var processId = createId("remove-");
    var startTS = new Date().getTime();
    // first get the item, because we need to also remove the
    // collaboration and open data groups...
    // and the Portal because w need the org's default
    // collaboration group id
    return Promise.all([
        getInitiative(id, requestOptions),
        getSelf(requestOptions)
    ])
        .then(function (results) { return __awaiter(_this, void 0, void 0, function () {
        var model, portal, siteId, e_1, prms, opts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    model = results[0];
                    portal = results[1];
                    siteId = model.item.properties.siteId;
                    if (!siteId) return [3 /*break*/, 5];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, getItem(siteId, requestOptions)];
                case 2:
                    _a.sent();
                    state.hasSite = true;
                    state.siteId = siteId;
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    state.hasSite = false;
                    return [3 /*break*/, 4];
                case 4: return [3 /*break*/, 6];
                case 5:
                    state.hasSite = false;
                    _a.label = 6;
                case 6:
                    state.initiativeOwner = model.item.owner;
                    state.collaborationGroupId = getProp(portal, "properties.openData.settings.groupId");
                    prms = [];
                    ["collaborationGroupId", "contentGroupId", "followersGroupId"].forEach(function (prop) {
                        if (model.item.properties[prop]) {
                            prms.push(removeInitiativeGroup(model.item.properties[prop], requestOptions).catch(function () { return Promise.resolve(true); }) // swallow group delete failures
                            );
                        }
                    });
                    // if the item is protected, un-protect it...
                    if (model.item.protected) {
                        opts = __assign({ id: id }, requestOptions);
                        prms.push(unprotectItem(opts));
                    }
                    return [2 /*return*/, Promise.all(prms)];
            }
        });
    }); })
        .then(function () {
        var prms = [];
        var opts = __assign({ id: id, owner: state.initiativeOwner }, requestOptions);
        prms.push(removeItem(opts));
        // if we have a site, let's detach it from the initiative
        if (state.hasSite) {
            prms.push(detachSiteFromInitiative(state.siteId, state.collaborationGroupId, requestOptions));
        }
        return Promise.all(prms);
    })
        .then(function () {
        return { success: true };
    });
}
//# sourceMappingURL=remove.js.map