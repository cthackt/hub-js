import { cloneObject } from "@esri/hub-common";
import geometryService from "./geometry";
import { createItem, updateItem } from "@esri/arcgis-rest-portal";
/**
 * Save an IModel. Generic function that will be used across all
 * type-specific save functions
 *
 * @export
 * @param {IModel} "model" object (i.e. `{item:{...}, data:{...}}`)
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<IModel>}
 */
export function saveModel(model, requestOptions) {
    const clone = cloneObject(model);
    const opts = createRequestOptions(clone, requestOptions);
    return createItem(opts).then((response) => {
        clone.item.id = response.id;
        return clone;
    });
}
/**
 * Update an IModel. Generic function that will be used across all
 * type-specific update functions
 *
 * @export
 * @param {IModel} "model" object (i.e. `{item:{...}, data:{...}}`)
 * @param {IRequestOptions} requestOptions
 * @returns {Promise<IModel>}
 */
export function updateModel(model, requestOptions) {
    const clone = cloneObject(model);
    const opts = createRequestOptions(clone, requestOptions);
    return updateItem(opts).then(() => {
        // return a new ref to the model that was passed in...
        return clone;
    });
}
/**
 * Centralize the serialization of an IModel into an object
 * that we can send to the Item methods
 *
 * @param {IModel} model
 * @param {IRequestOptions} requestOptions
 * @returns {*}
 */
function createRequestOptions(model, requestOptions) {
    // construct an object to send to the API
    const item = cloneObject(model.item);
    item.data = cloneObject(model.data);
    // create the options...
    const opts = Object.assign({ item }, requestOptions);
    return opts;
}
/**
 * Given an extent, project it and return a BBOX lat/long string, which is the format
 * required when creating an item.
 * @param orgExtent Extent to project
 * @param portal
 * @returns {Promise<any>} Promise that will resolve with a bbox string (W,S,E,N)
 */
export function getProjectedExtentAsBBOXString(options, requestOptions) {
    const url = geometryService.getUrl(options.portal);
    return geometryService
        .project(url, options.extent.spatialReference.wkid, 4326, "esriGeometryEnvelope", [options.extent], requestOptions)
        .then((response) => {
        const ext4326 = response.geometries[0];
        return (ext4326.xmin +
            "," +
            ext4326.ymin +
            "," +
            ext4326.xmax +
            "," +
            ext4326.ymax);
    });
}
//# sourceMappingURL=model.js.map