import { IInitiativeModel } from "@esri/hub-common";
/**
 * Given an object, conduct checks to see if it is an indicator
 * @protected
 */
export declare const isIndicator: (obj: any) => boolean;
/**
 * Convert the CAS formatted "field" into the new schema
 * @protected
 */
export declare const convertIndicatorField: (field: any) => {
    id: any;
    name: any;
    optional: any;
    description: any;
    supportedTypes: any[];
};
/**
 * Convert a CAS formatted indicator to the .definition in the new schama
 * @protected
 */
export declare const convertIndicatorToDefinition: (ind: any) => {
    id: any;
    type: string;
    name: any;
    optional: any;
    definition: {
        description: any;
        supportedTypes: any[];
        geometryTypes: any[];
        fields: any;
    };
};
/**
 * Given the Indicators entry from a CAS configurationSettings array,
 * convert to an indicators object in the new schema
 * @protected
 */
export declare function convertIndicatorsToDefinitions(indicatorsHash: any): any;
/**
 * Given the values hash, locate the properties that are Indicators
 * and return an array of cloned objects
 * @protected
 */
export declare const extractIndicators: (values: any) => any[];
/**
 * CAS format had the field properties nested but
 * the new format is flattened
 * @protected
 */
export declare const flattenField: (field: any) => {
    id: any;
    name: any;
    alias: any;
    type: any;
};
/**
 * Given the indicator value object (from the Initiative), extract
 * the properties to create the .source hash
 * @protected
 */
export declare const convertIndicatorValueToSource: (indicator: any) => {
    type: string;
    url: any;
    itemId: any;
    layerId: any;
    name: any;
    mappings: any;
};
/**
 * Convert the "source" information
 * @protected
 */
export declare const convertIndicator: (indicator: any) => {
    id: any;
    type: string;
    name: any;
    definition: {
        description: any;
    };
    source: {
        type: string;
        url: any;
        itemId: any;
        layerId: any;
        name: any;
        mappings: any;
    };
};
/**
 * Given the values hash that contains indicators, extract them
 * convert them, and return the indicators hash
 * @protected
 */
export declare const convertInitiativeIndicators: (values: any) => {
    id: any;
    type: string;
    name: any;
    definition: {
        description: any;
    };
    source: {
        type: string;
        url: any;
        itemId: any;
        layerId: any;
        name: any;
        mappings: any;
    };
}[];
/**
 * Given a Step object, return a new object with the
 * updated schema
 * @protected
 */
export declare const convertStep: (step: any) => {
    title: any;
    description: any;
    id: any;
    templateIds: any;
    itemIds: any;
};
/**
 * given the array of steps (prop names), construct an array
 * of the actual step objects while also falttening templates
 * and items arrays to just ids
 * @protected
 */
export declare const convertSteps: (steps: any, values: any) => {
    title: any;
    description: any;
    id: any;
    templateIds: any;
    itemIds: any;
}[];
/**
 * Extract the id property from an entry
 *
 * @protected
 * @param {*} entry
 * @returns
 */
export declare function byId(entry: any): any;
/**
 * Apply the 1.1 --> 2.0 Migration to an Initiative Model
 *
 * @protected
 * @param {IInitiativeModel} model
 * @param {string} [portalUrl]
 * @returns {IInitiativeModel}
 */
export declare function upgradeToTwoDotZero(model: IInitiativeModel, portalUrl?: string): IInitiativeModel;
