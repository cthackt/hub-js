"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhub"] = self["webpackChunkhub"] || []).push([["main"],{

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _esri_arcgis_rest_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @esri/arcgis-rest-request */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/index.js\");\n\n\n\n\n// const bootstrapCdnTags = `<script type=\"module\" src=\"https://js.arcgis.com/calcite-components/1.0.0-beta.82/calcite.esm.js\"></script>\n// <link rel=\"stylesheet\" type=\"text/css\" href=\"https://js.arcgis.com/calcite-components/1.0.0-beta.82/calcite.css\" />`\n\n// document.querySelector('head').insertAdjacentHTML(\"beforeend\", bootstrapCdnTags);\n\nconst authButton =`<div style=\"text-align: center; padding: 100px\"><button id=\"authenticate\">Authenticate</button></div>`;\n\ndocument.querySelector('body').insertAdjacentHTML(\"beforebegin\", authButton);\n\nconst signOutButton =  `<div style=\"text-align: center; padding: 100px\"><button id=\"signOutButton\">Sign Out</button></div>`\n\ndocument.querySelector('body').insertAdjacentHTML(\"beforeend\", signOutButton);\n\n\n\nlet session = null;\nconst clientId = \"M92CmlbtoKVEJZvL\";\nconst redirectUri = window.location.origin + \"/hub-js/dist/auth.html\";\n\nconst serializedSession = localStorage.getItem(\"__ARCGIS_REST_USER_SESSION__\"); // Check to see if there is a serialized session in local storage.\n\nif (serializedSession !== null && serializedSession !== \"undefined\") {\n   session = _esri_arcgis_rest_request__WEBPACK_IMPORTED_MODULE_0__.ArcGISIdentityManager.deserialize(serializedSession);\n}\n\nfunction updateSessionInfo(session) {\n   let sessionInfo = document.getElementById(\"sessionInfo\");\n\n   if (session) {\n      localStorage.setItem(\"__ARCGIS_REST_USER_SESSION__\", session.serialize());\n   } else {\n      console.error(\"Something went wrong :(\")\n   }\n}\n\nupdateSessionInfo(session);\n\ndocument.getElementById(\"authenticate\").addEventListener(\"click\", (event) => {\n   // Begin an OAuth2 login using a popup.\n   _esri_arcgis_rest_request__WEBPACK_IMPORTED_MODULE_0__.ArcGISIdentityManager.beginOAuth2({\n      clientId: clientId,\n      redirectUri: redirectUri,\n      popup: true\n   })\n      .then((newSession) => {\n      // Upon a successful login, update the session with the new session.\n      session = newSession;\n      console.log(session);\n      updateSessionInfo(session);\n      console.log(\">> authenticated! <<\")\n      })\n      .catch((error) => {\n      console.log(error);\n      })\n      .then()\n   event.preventDefault();\n\n});\n\ndocument.getElementById(\"signOutButton\").addEventListener(\"click\", (event) => {\n   event.preventDefault();\n   // call the signOut method to invalidate the token.\n   session.signOut().then(()=>{\n     session = null; // Clear the session from memory.\n     localStorage.removeItem(\"__ARCGIS_REST_USER_SESSION__\");\n     updateSessionInfo();\n   });\n });\n\n      \n\n\n\n// const contentSearchService = new ContentSearchService({\n//    portal: \"https://qa-pre-hub.mapsqa.arcgis.com/sharing/rest\",\n//    isPortal: false,\n//    authentication: new UserSession({username: 'sccwrp', password: 'L[k9B47P&H5Y'})\n// });\n\n// const filter: IContentSearchFilter = {\n//    \"filterType\": \"content\",\n//    \"type\": \"Feature Service\",\n//    \"tags\": \"bight18-sediment-chemistry\"\n// }\n\n// const result = contentSearchService.search({filter})\n// console.log(\"hi\");\n\n// console.log(result);\n\n//# sourceURL=webpack://hub/./src/index.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getFetch\": () => (/* binding */ getFetch)\n/* harmony export */ });\nfunction getFetch() {\n  return Promise.resolve({\n    fetch: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Response: globalThis.Response,\n    Request: globalThis.Request\n  });\n}\n\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.mjs?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Blob\": () => (/* binding */ Blob),\n/* harmony export */   \"File\": () => (/* binding */ File),\n/* harmony export */   \"FormData\": () => (/* binding */ FormData)\n/* harmony export */ });\nconst FormData = globalThis.FormData;\nconst File = globalThis.File;\nconst Blob = globalThis.Blob;\n\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.mjs?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/ApiKeyManager.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/ApiKeyManager.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApiKey\": () => (/* binding */ ApiKey),\n/* harmony export */   \"ApiKeyManager\": () => (/* binding */ ApiKeyManager)\n/* harmony export */ });\n/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Used to authenticate methods in ArcGIS REST JS with an API keys. The instance of `ApiKeyManager` can be passed to  {@linkcode IRequestOptions.authentication} to authenticate requests.\n *\n * ```js\n * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n \n * const apiKey = new ApiKeyManager.fromKey(\"...\");\n * ```\n *\n * In most cases however the API key can be passed directly to the {@linkcode IRequestOptions.authentication}.\n */\nclass ApiKeyManager {\n    constructor(options) {\n        /**\n         * The current portal the user is authenticated with.\n         */\n        this.portal = \"https://www.arcgis.com/sharing/rest\";\n        this.key = options.key;\n    }\n    /**\n     * The preferred method for creating an instance of `ApiKeyManager`.\n     */\n    static fromKey(apiKey) {\n        return new ApiKeyManager({ key: apiKey });\n    }\n    /**\n     * Gets a token (the API Key).\n     */\n    getToken(url) {\n        return Promise.resolve(this.key);\n    }\n}\n/**\n * @deprecated - Use {@linkcode ApiKeyManager}.\n * @internal\n */ /* istanbul ignore next */\nfunction ApiKey(options) {\n    console.log(\"DEPRECATED:, 'ApiKey' is deprecated. Use 'ApiKeyManager' instead.\");\n    return new ApiKeyManager(options);\n}\n//# sourceMappingURL=ApiKeyManager.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/ApiKeyManager.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/ApplicationCredentialsManager.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/ApplicationCredentialsManager.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApplicationCredentialsManager\": () => (/* binding */ ApplicationCredentialsManager),\n/* harmony export */   \"ApplicationSession\": () => (/* binding */ ApplicationSession)\n/* harmony export */ });\n/* harmony import */ var _fetch_token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fetch-token.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/fetch-token.js\");\n/* harmony import */ var _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/ArcGISTokenRequestError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISTokenRequestError.js\");\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with oAuth 2.0 application credentials. The instance of `ApplicationCredentialsManager` can be passed to {@linkcode IRequestOptions.authentication} to authenticate requests.\n *\n * ```js\n * import { ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n *\n * const session = ApplicationCredentialsManager.fromCredentials({\n *   clientId: \"abc123\",\n *   clientSecret: \"••••••\"\n * })\n * ```\n */\nclass ApplicationCredentialsManager {\n    constructor(options) {\n        this.clientId = options.clientId;\n        this.clientSecret = options.clientSecret;\n        this.token = options.token;\n        this.expires = options.expires;\n        this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n        this.duration = options.duration || 7200;\n    }\n    /**\n     * Preferred method for creating an `ApplicationCredentialsManager`\n     */\n    static fromCredentials(options) {\n        return new ApplicationCredentialsManager(options);\n    }\n    // URL is not actually read or passed through.\n    getToken(url, requestOptions) {\n        if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n            return Promise.resolve(this.token);\n        }\n        if (this._pendingTokenRequest) {\n            return this._pendingTokenRequest;\n        }\n        this._pendingTokenRequest = this.refreshToken(requestOptions);\n        return this._pendingTokenRequest;\n    }\n    refreshToken(requestOptions) {\n        const options = Object.assign({ params: {\n                client_id: this.clientId,\n                client_secret: this.clientSecret,\n                grant_type: \"client_credentials\",\n                expiration: this.duration\n            } }, requestOptions);\n        return (0,_fetch_token_js__WEBPACK_IMPORTED_MODULE_0__.fetchToken)(`${this.portal}/oauth2/token/`, options)\n            .then((response) => {\n            this._pendingTokenRequest = null;\n            this.token = response.token;\n            this.expires = response.expires;\n            return response.token;\n        })\n            .catch((e) => {\n            throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_1__.ArcGISTokenRequestError(e.message, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_1__.ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED, e.response, e.url, e.options);\n        });\n    }\n    refreshCredentials() {\n        return this.refreshToken().then(() => this);\n    }\n}\n/**\n * @deprecated - Use {@linkcode ApplicationCredentialsManager}.\n * @internal\n */ /* istanbul ignore next */\nfunction ApplicationSession(options) {\n    console.log(\"DEPRECATED:, 'ApplicationSession' is deprecated. Use 'ApplicationCredentialsManager' instead.\");\n    return new ApplicationCredentialsManager(options);\n}\n//# sourceMappingURL=ApplicationCredentialsManager.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/ApplicationCredentialsManager.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/ArcGISIdentityManager.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/ArcGISIdentityManager.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArcGISIdentityManager\": () => (/* binding */ ArcGISIdentityManager),\n/* harmony export */   \"UserSession\": () => (/* binding */ UserSession)\n/* harmony export */ });\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./request.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/request.js\");\n/* harmony import */ var _utils_decode_query_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/decode-query-string.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/decode-query-string.js\");\n/* harmony import */ var _utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/encode-query-string.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js\");\n/* harmony import */ var _fetch_token_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fetch-token.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/fetch-token.js\");\n/* harmony import */ var _federation_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./federation-utils.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/federation-utils.js\");\n/* harmony import */ var _validate_app_access_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./validate-app-access.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/validate-app-access.js\");\n/* harmony import */ var _utils_clean_url_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/clean-url.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js\");\n/* harmony import */ var _revoke_token_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./revoke-token.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/revoke-token.js\");\n/* harmony import */ var _utils_generate_code_challenge_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/generate-code-challenge.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-code-challenge.js\");\n/* harmony import */ var _utils_generate_random_string_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/generate-random-string.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-random-string.js\");\n/* harmony import */ var _utils_ArcGISAccessDeniedError_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/ArcGISAccessDeniedError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISAccessDeniedError.js\");\n/* harmony import */ var _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/ArcGISTokenRequestError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISTokenRequestError.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/index.js\");\n/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `ArcGISIdentityManager` includes helper methods for [OAuth 2.0](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/oauth-2.0/) in both browser and server applications.\n *\n * **It is not recommended to construct `ArcGISIdentityManager` directly**. Instead there are several static methods used for specific workflows. The 2 primary workflows relate to oAuth 2.0:\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} and {@linkcode ArcGISIdentityManager.completeOAuth2} for oAuth 2.0 in browser-only environment.\n * * {@linkcode ArcGISIdentityManager.authorize} and {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode} for oAuth 2.0 for server-enabled application.\n *\n * Other more specialized helpers for less common workflows also exist:\n *\n * * {@linkcode ArcGISIdentityManager.fromToken} for when you have an existing token from another source and would like create an `ArcGISIdentityManager` instance.\n * * {@linkcode ArcGISIdentityManager.fromCredential} for creating  an `ArcGISIdentityManager` instance from a `Credentials` object in the ArcGIS JS API `IdentityManager`\n * * {@linkcode ArcGISIdentityManager.signIn} for authenticating directly with a users username and password for environments with a user interface for oAuth 2.0.\n *\n * Once a manager is created there are additional utilities:\n *\n * * {@linkcode ArcGISIdentityManager.serialize} can be used to create a JSON object representing an instance of `ArcGISIdentityManager`\n * * {@linkcode ArcGISIdentityManager.deserialize} will create a new `ArcGISIdentityManager` from a JSON object created with {@linkcode ArcGISIdentityManager.serialize}\n * * {@linkcode ArcGISIdentityManager.destroy} or {@linkcode ArcGISIdentityManager.signOut} will invalidate any tokens in use by the  `ArcGISIdentityManager`.\n */\nclass ArcGISIdentityManager {\n    constructor(options) {\n        this.clientId = options.clientId;\n        this._refreshToken = options.refreshToken;\n        this._refreshTokenExpires = options.refreshTokenExpires;\n        this._username = options.username;\n        this.password = options.password;\n        this._token = options.token;\n        this._tokenExpires = options.tokenExpires;\n        this.portal = options.portal\n            ? (0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_6__.cleanUrl)(options.portal)\n            : \"https://www.arcgis.com/sharing/rest\";\n        this.ssl = options.ssl;\n        this.provider = options.provider || \"arcgis\";\n        this.tokenDuration = options.tokenDuration || 20160;\n        this.redirectUri = options.redirectUri;\n        this.server = options.server;\n        this.federatedServers = {};\n        this.trustedDomains = [];\n        // if a non-federated server was passed explicitly, it should be trusted.\n        if (options.server) {\n            // if the url includes more than '/arcgis/', trim the rest\n            const root = this.getServerRootUrl(options.server);\n            this.federatedServers[root] = {\n                token: options.token,\n                expires: options.tokenExpires\n            };\n        }\n        this._pendingTokenRequests = {};\n    }\n    /**\n     * The current ArcGIS Online or ArcGIS Enterprise `token`.\n     */\n    get token() {\n        return this._token;\n    }\n    /**\n     * The expiration time of the current `token`.\n     */\n    get tokenExpires() {\n        return this._tokenExpires;\n    }\n    /**\n     * The current token to ArcGIS Online or ArcGIS Enterprise.\n     */\n    get refreshToken() {\n        return this._refreshToken;\n    }\n    /**\n     * The expiration time of the current `refreshToken`.\n     */\n    get refreshTokenExpires() {\n        return this._refreshTokenExpires;\n    }\n    /**\n     * The currently authenticated user.\n     */\n    get username() {\n        if (this._username) {\n            return this._username;\n        }\n        if (this._user && this._user.username) {\n            return this._user.username;\n        }\n    }\n    /**\n     * Returns `true` if these credentials can be refreshed and `false` if it cannot.\n     */\n    get canRefresh() {\n        if (this.username && this.password) {\n            return true;\n        }\n        if (this.clientId && this.refreshToken) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the authentication window will open in a new tab/window. Otherwise, the user will be redirected to the authorization page in their current tab/window and the function will return `undefined`.\n     *\n     * If `popup` is `true` (the default) this method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance and you must call {@linkcode ArcGISIdentityManager.completeOAuth2} on the page defined in the `redirectUri`. Otherwise it will return undefined and the {@linkcode ArcGISIdentityManager.completeOAuth2} method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance.\n     *\n     * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n     *\n     * @browserOnly\n     */\n    static beginOAuth2(options, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        const { portal, provider, clientId, expiration, redirectUri, popup, popupWindowFeatures, locale, params, style, pkce, state } = Object.assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            provider: \"arcgis\",\n            expiration: 20160,\n            popup: true,\n            popupWindowFeatures: \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n            locale: \"\",\n            style: \"\",\n            pkce: true\n        }, options);\n        /**\n         * Generate a  random string for the `state` param and store it in local storage. This is used\n         * to validate that all parts of the oAuth process were performed on the same client.\n         */\n        const stateId = state || (0,_utils_generate_random_string_js__WEBPACK_IMPORTED_MODULE_9__.generateRandomString)(win);\n        const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n        win.localStorage.setItem(stateStorageKey, stateId);\n        // Start setting up the URL to the authorization screen.\n        let authorizeUrl = `${(0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_6__.cleanUrl)(portal)}/oauth2/authorize`;\n        const authorizeUrlParams = {\n            client_id: clientId,\n            response_type: pkce ? \"code\" : \"token\",\n            expiration: expiration,\n            redirect_uri: redirectUri,\n            state: JSON.stringify({\n                id: stateId,\n                originalUrl: win.location.href // this is used to reset the URL back the original URL upon return\n            }),\n            locale: locale,\n            style: style\n        };\n        // If we are authorizing through a specific social provider update the params and base URL.\n        if (provider !== \"arcgis\") {\n            authorizeUrl = `${(0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_6__.cleanUrl)(portal)}/oauth2/social/authorize`;\n            authorizeUrlParams.socialLoginProviderName = provider;\n            authorizeUrlParams.autoAccountCreateForSocial = true;\n        }\n        /**\n         * set a value that will be set to a promise which will later resolve when we are ready\n         * to send users to the authorization page.\n         */\n        let setupAuth;\n        if (pkce) {\n            /**\n             * If we are authenticating with PKCE we need to generate the code challenge which is\n             * async so we generate the code challenge and assign the resulting Promise to `setupAuth`\n             */\n            const codeVerifier = (0,_utils_generate_random_string_js__WEBPACK_IMPORTED_MODULE_9__.generateRandomString)(win);\n            const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n            win.localStorage.setItem(codeVerifierStorageKey, codeVerifier);\n            setupAuth = (0,_utils_generate_code_challenge_js__WEBPACK_IMPORTED_MODULE_8__.generateCodeChallenge)(codeVerifier, win).then(function (codeChallenge) {\n                authorizeUrlParams.code_challenge_method = codeChallenge\n                    ? \"S256\"\n                    : \"plain\";\n                authorizeUrlParams.code_challenge = codeChallenge\n                    ? codeChallenge\n                    : codeVerifier;\n            });\n        }\n        else {\n            /**\n             * If we aren't authenticating with PKCE we can just assign a resolved promise to `setupAuth`\n             */\n            setupAuth = Promise.resolve();\n        }\n        /**\n         * Once we are done setting up with (for PKCE) we can start the auth process.\n         */\n        return setupAuth.then(() => {\n            // combine the authorize URL and params\n            authorizeUrl = `${authorizeUrl}?${(0,_utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_2__.encodeQueryString)(authorizeUrlParams)}`;\n            // append additional params passed by the user\n            if (params) {\n                authorizeUrl = `${authorizeUrl}&${(0,_utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_2__.encodeQueryString)(params)}`;\n            }\n            if (popup) {\n                // If we are authenticating a popup we need to return a Promise that will resolve to an ArcGISIdentityManager later.\n                return new Promise((resolve, reject) => {\n                    // Add an event listener to listen for when a user calls `ArcGISIdentityManager.completeOAuth2()` in the popup.\n                    win.addEventListener(`arcgis-rest-js-popup-auth-${clientId}`, (e) => {\n                        if (e.detail.error === \"access_denied\") {\n                            const error = new _utils_ArcGISAccessDeniedError_js__WEBPACK_IMPORTED_MODULE_10__.ArcGISAccessDeniedError();\n                            reject(error);\n                            return error;\n                        }\n                        if (e.detail.error) {\n                            const error = new _request_js__WEBPACK_IMPORTED_MODULE_0__.ArcGISAuthError(e.detail.errorMessage, e.detail.error);\n                            reject(error);\n                            return error;\n                        }\n                        resolve(new ArcGISIdentityManager({\n                            clientId,\n                            portal,\n                            ssl: e.detail.ssl,\n                            token: e.detail.token,\n                            tokenExpires: e.detail.expires,\n                            username: e.detail.username,\n                            refreshToken: e.detail.refreshToken,\n                            refreshTokenExpires: e.detail.refreshTokenExpires\n                        }));\n                    }, {\n                        once: true\n                    });\n                    // open the popup\n                    win.open(authorizeUrl, \"oauth-window\", popupWindowFeatures);\n                    win.dispatchEvent(new CustomEvent(\"arcgis-rest-js-popup-auth-start\"));\n                });\n            }\n            else {\n                // If we aren't authenticating with a popup just send the user to the authorization page.\n                win.location.href = authorizeUrl;\n                return undefined;\n            }\n        });\n    }\n    /**\n     * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n     * will be returned to the previous window and the popup will close. Otherwise a new `ArcGISIdentityManager` will be returned. You must pass the same values for `clientId`, `popup`, `portal`, and `pkce` as you used in `beginOAuth2()`.\n     *\n     * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n     * @browserOnly\n     */\n    static completeOAuth2(options, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        // pull out necessary options\n        const { portal, clientId, popup, pkce } = Object.assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            popup: true,\n            pkce: true\n        }, options);\n        // pull the saved state id out of local storage\n        const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n        const stateId = win.localStorage.getItem(stateStorageKey);\n        // get the params provided by the server and compare the server state with the client saved state\n        const params = (0,_utils_decode_query_string_js__WEBPACK_IMPORTED_MODULE_1__.decodeQueryString)(pkce\n            ? win.location.search.replace(/^\\?/, \"\")\n            : win.location.hash.replace(/^#/, \"\"));\n        const state = params && params.state ? JSON.parse(params.state) : undefined;\n        function reportError(errorMessage, error, originalUrl) {\n            win.localStorage.removeItem(stateStorageKey);\n            if (popup && win.opener) {\n                win.opener.dispatchEvent(new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n                    detail: {\n                        error,\n                        errorMessage\n                    }\n                }));\n                win.close();\n                return;\n            }\n            if (originalUrl) {\n                win.history.replaceState(win.history.state, \"\", originalUrl);\n            }\n            if (error === \"access_denied\") {\n                return Promise.reject(new _utils_ArcGISAccessDeniedError_js__WEBPACK_IMPORTED_MODULE_10__.ArcGISAccessDeniedError());\n            }\n            return Promise.reject(new _request_js__WEBPACK_IMPORTED_MODULE_0__.ArcGISAuthError(errorMessage, error));\n        }\n        // create a function to create the final ArcGISIdentityManager from the token info.\n        function createManager(oauthInfo, originalUrl) {\n            win.localStorage.removeItem(stateStorageKey);\n            if (popup && win.opener) {\n                win.opener.dispatchEvent(new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n                    detail: Object.assign({}, oauthInfo)\n                }));\n                win.close();\n                return;\n            }\n            win.history.replaceState(win.history.state, \"\", originalUrl);\n            return new ArcGISIdentityManager({\n                clientId,\n                portal,\n                ssl: oauthInfo.ssl,\n                token: oauthInfo.token,\n                tokenExpires: oauthInfo.expires,\n                username: oauthInfo.username,\n                refreshToken: oauthInfo.refreshToken,\n                refreshTokenExpires: oauthInfo.refreshTokenExpires\n            });\n        }\n        if (!stateId || !state) {\n            return reportError(\"No authentication state was found, call `ArcGISIdentityManager.beginOAuth2(...)` to start the authentication process.\", \"no-auth-state\");\n        }\n        if (state.id !== stateId) {\n            return reportError(\"Saved client state did not match server sent state.\", \"mismatched-auth-state\");\n        }\n        if (params.error) {\n            const error = params.error;\n            const errorMessage = params.error_description || \"Unknown error\";\n            return reportError(errorMessage, error, state.originalUrl);\n        }\n        /**\n         * If we are using PKCE the authorization code will be in the query params.\n         * For implicit grants the token will be in the hash.\n         */\n        if (pkce && params.code) {\n            const tokenEndpoint = (0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_6__.cleanUrl)(`${portal}/oauth2/token/`);\n            const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n            const codeVerifier = win.localStorage.getItem(codeVerifierStorageKey);\n            win.localStorage.removeItem(codeVerifierStorageKey);\n            // exchange our auth code for a token + refresh token\n            return (0,_fetch_token_js__WEBPACK_IMPORTED_MODULE_3__.fetchToken)(tokenEndpoint, {\n                httpMethod: \"POST\",\n                params: {\n                    client_id: clientId,\n                    code_verifier: codeVerifier,\n                    grant_type: \"authorization_code\",\n                    redirect_uri: location.href.replace(location.search, \"\"),\n                    code: params.code\n                }\n            })\n                .then((tokenResponse) => {\n                return createManager(Object.assign(Object.assign({}, tokenResponse), state), state.originalUrl);\n            })\n                .catch((e) => {\n                return reportError(e.message, e.error, state.originalUrl);\n            });\n        }\n        if (!pkce && params.access_token) {\n            return Promise.resolve(createManager(Object.assign({ token: params.access_token, expires: new Date(Date.now() + parseInt(params.expires_in, 10) * 1000), ssl: params.ssl === \"true\", username: params.username }, state), state.originalUrl));\n        }\n        return reportError(\"Unknown error\", \"oauth-error\", state.originalUrl);\n    }\n    /**\n     * Request credentials information from the parent application\n     *\n     * When an application is embedded into another application via an IFrame, the embedded app can\n     * use `window.postMessage` to request credentials from the host application. This function wraps\n     * that behavior.\n     *\n     * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n     *\n     * Note: The parent application will not respond if the embedded app's origin is not:\n     * - the same origin as the parent or *.arcgis.com (JSAPI)\n     * - in the list of valid child origins (REST-JS)\n     *\n     *\n     * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n     * @browserOnly\n     */\n    static fromParent(parentOrigin, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        // Declare handler outside of promise scope so we can detach it\n        let handler;\n        // return a promise that will resolve when the handler receives\n        // session information from the correct origin\n        return new Promise((resolve, reject) => {\n            // create an event handler that just wraps the parentMessageHandler\n            handler = (event) => {\n                // ensure we only listen to events from the parent\n                if (event.source === win.parent && event.data) {\n                    try {\n                        return resolve(ArcGISIdentityManager.parentMessageHandler(event));\n                    }\n                    catch (err) {\n                        return reject(err);\n                    }\n                }\n            };\n            // add listener\n            win.addEventListener(\"message\", handler, false);\n            win.parent.postMessage({ type: \"arcgis:auth:requestCredential\" }, parentOrigin);\n        }).then((manager) => {\n            win.removeEventListener(\"message\", handler, false);\n            return manager;\n        });\n    }\n    /**\n     * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n     * the ArcGIS Online or ArcGIS Enterprise authorization page.\n     *\n     * @nodeOnly\n     */\n    static authorize(options, response) {\n        const { portal, clientId, expiration, redirectUri, state } = Object.assign({ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 }, options);\n        const queryParams = {\n            client_id: clientId,\n            expiration,\n            response_type: \"code\",\n            redirect_uri: redirectUri\n        };\n        if (state) {\n            queryParams.state = state;\n        }\n        const url = `${portal}/oauth2/authorize?${(0,_utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_2__.encodeQueryString)(queryParams)}`;\n        response.writeHead(301, {\n            Location: url\n        });\n        response.end();\n    }\n    /**\n     * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n     * for a `access_token`.\n     *\n     * @nodeOnly\n     */\n    static exchangeAuthorizationCode(options, authorizationCode) {\n        const { portal, clientId, redirectUri } = Object.assign({\n            portal: \"https://www.arcgis.com/sharing/rest\"\n        }, options);\n        return (0,_fetch_token_js__WEBPACK_IMPORTED_MODULE_3__.fetchToken)(`${portal}/oauth2/token`, {\n            params: {\n                grant_type: \"authorization_code\",\n                client_id: clientId,\n                redirect_uri: redirectUri,\n                code: authorizationCode\n            }\n        })\n            .then((response) => {\n            return new ArcGISIdentityManager({\n                clientId,\n                portal,\n                ssl: response.ssl,\n                redirectUri,\n                refreshToken: response.refreshToken,\n                refreshTokenExpires: response.refreshTokenExpires,\n                token: response.token,\n                tokenExpires: response.expires,\n                username: response.username\n            });\n        })\n            .catch((e) => {\n            throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(e.message, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED, e.response, e.url, e.options);\n        });\n    }\n    static deserialize(str) {\n        const options = JSON.parse(str);\n        return new ArcGISIdentityManager({\n            clientId: options.clientId,\n            refreshToken: options.refreshToken,\n            refreshTokenExpires: options.refreshTokenExpires\n                ? new Date(options.refreshTokenExpires)\n                : undefined,\n            username: options.username,\n            password: options.password,\n            token: options.token,\n            tokenExpires: options.tokenExpires\n                ? new Date(options.tokenExpires)\n                : undefined,\n            portal: options.portal,\n            ssl: options.ssl,\n            tokenDuration: options.tokenDuration,\n            redirectUri: options.redirectUri,\n            server: options.server\n        });\n    }\n    /**\n     * Translates authentication from the format used in the [`IdentityManager` class in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html).\n     *\n     * You will need to call both [`IdentityManger.findCredential`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findCredential) and [`IdentityManger.findServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findServerInfo) to obtain both parameters for this method.\n     *\n     * This method can be used with {@linkcode ArcGISIdentityManager.toCredential} to interop with the ArcGIS API for JavaScript.\n     *\n     * ```js\n     * require([\"esri/id\"], (esriId) => {\n     *   const credential = esriId.findCredential(\"https://www.arcgis.com/sharing/rest\");\n     *   const serverInfo = esriId.findServerInfo(\"https://www.arcgis.com/sharing/rest\");\n     *\n     *   const manager = ArcGISIdentityManager.fromCredential(credential, serverInfo);\n     * });\n     * ```\n     *\n     * @returns ArcGISIdentityManager\n     */\n    static fromCredential(credential, serverInfo) {\n        // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n        // Here, we provide default values for them to cover this condition\n        const ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n        const expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n        if (serverInfo.hasServer) {\n            return new ArcGISIdentityManager({\n                server: credential.server,\n                ssl,\n                token: credential.token,\n                username: credential.userId,\n                tokenExpires: new Date(expires)\n            });\n        }\n        return new ArcGISIdentityManager({\n            portal: (0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_6__.cleanUrl)(credential.server.includes(\"sharing/rest\")\n                ? credential.server\n                : credential.server + `/sharing/rest`),\n            ssl,\n            token: credential.token,\n            username: credential.userId,\n            tokenExpires: new Date(expires)\n        });\n    }\n    /**\n     * Handle the response from the parent\n     * @param event DOM Event\n     */\n    static parentMessageHandler(event) {\n        if (event.data.type === \"arcgis:auth:credential\") {\n            return new ArcGISIdentityManager(event.data.credential);\n        }\n        if (event.data.type === \"arcgis:auth:error\") {\n            const err = new Error(event.data.error.message);\n            err.name = event.data.error.name;\n            throw err;\n        }\n        else {\n            throw new Error(\"Unknown message type.\");\n        }\n    }\n    /**\n     * Revokes all active tokens for a provided {@linkcode ArcGISIdentityManager}. The can be considered the equivalent to signing the user out of your application.\n     */\n    static destroy(manager) {\n        return (0,_revoke_token_js__WEBPACK_IMPORTED_MODULE_7__.revokeToken)({\n            clientId: manager.clientId,\n            portal: manager.portal,\n            token: manager.refreshToken || manager.token\n        });\n    }\n    /**\n     * Create a  {@linkcode ArcGISIdentityManager} from an existing token. Useful for when you have a users token from a different authentication system and want to get a  {@linkcode ArcGISIdentityManager}.\n     */\n    static fromToken(options) {\n        const manager = new ArcGISIdentityManager(options);\n        return manager.getUser().then(() => {\n            return manager;\n        });\n    }\n    /**\n     * Initialize a {@linkcode ArcGISIdentityManager} with a users `username` and `password`. **This method is intended ONLY for applications without a user interface such as CLI tools.**.\n     *\n     * If possible you should use {@linkcode ArcGISIdentityManager.beginOAuth2} to authenticate users in a browser or {@linkcode ArcGISIdentityManager.authorize} for authenticating users with a web server.\n     */\n    static signIn(options) {\n        const manager = new ArcGISIdentityManager(options);\n        return manager.getUser().then(() => {\n            return manager;\n        });\n    }\n    /**\n     * Returns authentication in a format useable in the [`IdentityManager.registerToken()` method in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#registerToken).\n     *\n     * This method can be used with {@linkcode ArcGISIdentityManager.fromCredential} to interop with the ArcGIS API for JavaScript.\n     *\n     * ```js\n     * require([\"esri/id\"], (esriId) => {\n     *   esriId.registerToken(manager.toCredential());\n     * })\n     \n     * ```\n     *\n     * @returns ICredential\n     */\n    toCredential() {\n        return {\n            expires: this.tokenExpires.getTime(),\n            server: this.server || this.portal,\n            ssl: this.ssl,\n            token: this.token,\n            userId: this.username\n        };\n    }\n    /**\n     * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * manager.getUser()\n     *   .then(response => {\n     *     console.log(response.role); // \"org_admin\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    getUser(requestOptions) {\n        if (this._pendingUserRequest) {\n            return this._pendingUserRequest;\n        }\n        else if (this._user) {\n            return Promise.resolve(this._user);\n        }\n        else {\n            const url = `${this.portal}/community/self`;\n            const options = Object.assign(Object.assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingUserRequest = (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(url, options).then((response) => {\n                this._user = response;\n                this._pendingUserRequest = null;\n                return response;\n            });\n            return this._pendingUserRequest;\n        }\n    }\n    /**\n     * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * manager.getPortal()\n     *   .then(response => {\n     *     console.log(portal.name); // \"City of ...\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    getPortal(requestOptions) {\n        if (this._pendingPortalRequest) {\n            return this._pendingPortalRequest;\n        }\n        else if (this._portalInfo) {\n            return Promise.resolve(this._portalInfo);\n        }\n        else {\n            const url = `${this.portal}/portals/self`;\n            const options = Object.assign(Object.assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingPortalRequest = (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(url, options).then((response) => {\n                this._portalInfo = response;\n                this._pendingPortalRequest = null;\n                return response;\n            });\n            return this._pendingPortalRequest;\n        }\n    }\n    /**\n     * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n     *\n     * ```js\n     * manager.getUsername()\n     *   .then(response => {\n     *     console.log(response); // \"casey_jones\"\n     *   })\n     * ```\n     */\n    getUsername() {\n        if (this.username) {\n            return Promise.resolve(this.username);\n        }\n        else {\n            return this.getUser().then((user) => {\n                return user.username;\n            });\n        }\n    }\n    /**\n     * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n     * the request is to an ArcGIS Online domain `token` will be used. If the request\n     * is to the current `portal` the current `token` will also be used. However if\n     * the request is to an unknown server we will validate the server with a request\n     * to our current `portal`.\n     */\n    getToken(url, requestOptions) {\n        if ((0,_federation_utils_js__WEBPACK_IMPORTED_MODULE_4__.canUseOnlineToken)(this.portal, url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else if (new RegExp(this.portal, \"i\").test(url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else {\n            return this.getTokenForServer(url, requestOptions);\n        }\n    }\n    /**\n     * Get application access information for the current user\n     * see `validateAppAccess` function for details\n     *\n     * @param clientId application client id\n     */\n    validateAppAccess(clientId) {\n        return this.getToken(this.portal).then((token) => {\n            return (0,_validate_app_access_js__WEBPACK_IMPORTED_MODULE_5__.validateAppAccess)(token, clientId);\n        });\n    }\n    toJSON() {\n        return {\n            clientId: this.clientId,\n            refreshToken: this.refreshToken,\n            refreshTokenExpires: this.refreshTokenExpires || undefined,\n            username: this.username,\n            password: this.password,\n            token: this.token,\n            tokenExpires: this.tokenExpires || undefined,\n            portal: this.portal,\n            ssl: this.ssl,\n            tokenDuration: this.tokenDuration,\n            redirectUri: this.redirectUri,\n            server: this.server\n        };\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    /**\n     * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n     * and creating a ArcGISIdentityManager, the app can then enable \"post message\" style authentication by calling\n     * this method.\n     *\n     * Internally this adds an event listener on window for the `message` event\n     *\n     * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n     */\n    enablePostMessageAuth(validChildOrigins, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n        win.addEventListener(\"message\", this._hostHandler, false);\n    }\n    /**\n     * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n     * to transition routes, it should call `ArcGISIdentityManager.disablePostMessageAuth()` to remove\n     * the event listener and prevent memory leaks\n     */\n    disablePostMessageAuth(win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        win.removeEventListener(\"message\", this._hostHandler, false);\n    }\n    /**\n     * Manually refreshes the current `token` and `tokenExpires`.\n     */\n    refreshCredentials(requestOptions) {\n        // make sure subsequent calls to getUser() don't returned cached metadata\n        this._user = null;\n        if (this.username && this.password) {\n            return this.refreshWithUsernameAndPassword(requestOptions);\n        }\n        if (this.clientId && this.refreshToken) {\n            return this.refreshWithRefreshToken();\n        }\n        return Promise.reject(new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(\"Unable to refresh token. No refresh token or password present.\", _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED));\n    }\n    /**\n     * Determines the root of the ArcGIS Server or Portal for a given URL.\n     *\n     * @param url the URl to determine the root url for.\n     */\n    getServerRootUrl(url) {\n        const [root] = (0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_6__.cleanUrl)(url).split(/\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/);\n        const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n        const [domain, ...path] = domainAndPath.split(\"/\");\n        // only the domain is lowercased because in some cases an org id might be\n        // in the path which cannot be lowercased.\n        return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n    }\n    /**\n     * Returns the proper [`credentials`] option for `fetch` for a given domain.\n     * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n     * Used internally by underlying request methods to add support for specific security considerations.\n     *\n     * @param url The url of the request\n     * @returns \"include\" or \"same-origin\"\n     */\n    getDomainCredentials(url) {\n        if (!this.trustedDomains || !this.trustedDomains.length) {\n            return \"same-origin\";\n        }\n        return this.trustedDomains.some((domainWithProtocol) => {\n            return url.startsWith(domainWithProtocol);\n        })\n            ? \"include\"\n            : \"same-origin\";\n    }\n    /**\n     * Convenience method for {@linkcode ArcGISIdentityManager.destroy} for this instance of `ArcGISIdentityManager`\n     */\n    signOut() {\n        return ArcGISIdentityManager.destroy(this);\n    }\n    /**\n     * Return a function that closes over the validOrigins array and\n     * can be used as an event handler for the `message` event\n     *\n     * @param validOrigins Array of valid origins\n     */\n    createPostMessageHandler(validOrigins) {\n        // return a function that closes over the validOrigins and\n        // has access to the credential\n        return (event) => {\n            // Verify that the origin is valid\n            // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n            // is in the array via exact match. More info about avoiding postMessage xss issues here\n            // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n            const isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n            // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n            // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n            // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n            // use a list of valid origins\n            // Ensure the message type is something we want to handle\n            const isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n            // Ensure we don't pass an expired session forward\n            const isTokenValid = this.tokenExpires.getTime() > Date.now();\n            if (isValidOrigin && isValidType) {\n                let msg = {};\n                if (isTokenValid) {\n                    const credential = this.toJSON();\n                    msg = {\n                        type: \"arcgis:auth:credential\",\n                        credential\n                    };\n                }\n                else {\n                    msg = {\n                        type: \"arcgis:auth:error\",\n                        error: {\n                            name: \"tokenExpiredError\",\n                            message: \"Token was expired, and not returned to the child application\"\n                        }\n                    };\n                }\n                event.source.postMessage(msg, event.origin);\n            }\n        };\n    }\n    /**\n     * Validates that a given URL is properly federated with our current `portal`.\n     * Attempts to use the internal `federatedServers` cache first.\n     */\n    getTokenForServer(url, requestOptions) {\n        // requests to /rest/services/ and /rest/admin/services/ are both valid\n        // Federated servers may have inconsistent casing, so lowerCase it\n        const root = this.getServerRootUrl(url);\n        const existingToken = this.federatedServers[root];\n        if (existingToken &&\n            existingToken.expires &&\n            existingToken.expires.getTime() > Date.now()) {\n            return Promise.resolve(existingToken.token);\n        }\n        if (this._pendingTokenRequests[root]) {\n            return this._pendingTokenRequests[root];\n        }\n        this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(() => {\n            return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(`${root}/rest/info`, {\n                credentials: this.getDomainCredentials(url)\n            })\n                .then((serverInfo) => {\n                if (serverInfo.owningSystemUrl) {\n                    /**\n                     * if this server is not owned by this portal\n                     * bail out with an error since we know we wont\n                     * be able to generate a token\n                     */\n                    if (!(0,_federation_utils_js__WEBPACK_IMPORTED_MODULE_4__.isFederated)(serverInfo.owningSystemUrl, this.portal)) {\n                        throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(`${url} is not federated with ${this.portal}.`, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.NOT_FEDERATED);\n                    }\n                    else {\n                        /**\n                         * if the server is federated, use the relevant token endpoint.\n                         */\n                        return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(`${serverInfo.owningSystemUrl}/sharing/rest/info`, requestOptions);\n                    }\n                }\n                else if (serverInfo.authInfo &&\n                    this.federatedServers[root] !== undefined) {\n                    /**\n                     * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n                     * federation, but the root server url is recognized, use its built in token endpoint.\n                     */\n                    return Promise.resolve({\n                        authInfo: serverInfo.authInfo\n                    });\n                }\n                else {\n                    throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(`${url} is not federated with any portal and is not explicitly trusted.`, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.NOT_FEDERATED);\n                }\n            })\n                .then((serverInfo) => {\n                // an expired token cant be used to generate a new token so refresh our credentials before trying to generate a server token\n                if (this.token && this.tokenExpires.getTime() < Date.now()) {\n                    // If we are authenticated to a single server just refresh with username and password and use the new credentials as the credentials for this server.\n                    if (this.server) {\n                        return this.refreshCredentials().then(() => {\n                            return {\n                                token: this.token,\n                                expires: this.tokenExpires\n                            };\n                        });\n                    }\n                    // Otherwise refresh the credentials for the portal and generate a URL for the specific server.\n                    return this.refreshCredentials().then(() => {\n                        return this.generateTokenForServer(serverInfo.authInfo.tokenServicesUrl, root);\n                    });\n                }\n                else {\n                    return this.generateTokenForServer(serverInfo.authInfo.tokenServicesUrl, root);\n                }\n            })\n                .then((response) => {\n                this.federatedServers[root] = response;\n                delete this._pendingTokenRequests[root];\n                return response.token;\n            });\n        });\n        return this._pendingTokenRequests[root];\n    }\n    /**\n     * Generates a token for a given `serverUrl` using a given `tokenServicesUrl`.\n     */\n    generateTokenForServer(tokenServicesUrl, serverUrl) {\n        return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(tokenServicesUrl, {\n            params: {\n                token: this.token,\n                serverUrl,\n                expiration: this.tokenDuration\n            }\n        })\n            .then((response) => {\n            return {\n                token: response.token,\n                expires: new Date(response.expires - 1000 * 60 * 5)\n            };\n        })\n            .catch((e) => {\n            throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(e.message, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.GENERATE_TOKEN_FOR_SERVER_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * Returns an unexpired token for the current `portal`.\n     */\n    getFreshToken(requestOptions) {\n        if (this.token && !this.tokenExpires) {\n            return Promise.resolve(this.token);\n        }\n        if (this.token &&\n            this.tokenExpires &&\n            this.tokenExpires.getTime() > Date.now()) {\n            return Promise.resolve(this.token);\n        }\n        if (!this._pendingTokenRequests[this.portal]) {\n            this._pendingTokenRequests[this.portal] = this.refreshCredentials(requestOptions).then(() => {\n                this._pendingTokenRequests[this.portal] = null;\n                return this.token;\n            });\n        }\n        return this._pendingTokenRequests[this.portal];\n    }\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `username` and\n     * `password`.\n     */\n    refreshWithUsernameAndPassword(requestOptions) {\n        const params = {\n            username: this.username,\n            password: this.password,\n            expiration: this.tokenDuration,\n            client: \"referer\",\n            referer: typeof window !== \"undefined\" &&\n                typeof window.document !== \"undefined\" &&\n                window.location &&\n                window.location.origin\n                ? window.location.origin\n                : /* istanbul ignore next */\n                    _index_js__WEBPACK_IMPORTED_MODULE_12__.NODEJS_DEFAULT_REFERER_HEADER\n        };\n        return (this.server\n            ? (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(`${this.getServerRootUrl(this.server)}/rest/info`).then((response) => {\n                return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(response.authInfo.tokenServicesUrl, Object.assign({ params }, requestOptions));\n            })\n            : (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(`${this.portal}/generateToken`, Object.assign({ params }, requestOptions)))\n            .then((response) => {\n            this.updateToken(response.token, new Date(response.expires));\n            return this;\n        })\n            .catch((e) => {\n            throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(e.message, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n     */\n    refreshWithRefreshToken(requestOptions) {\n        // If our refresh token expires sometime in the next 24 hours then refresh the refresh token\n        const ONE_DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;\n        if (this.refreshToken &&\n            this.refreshTokenExpires &&\n            this.refreshTokenExpires.getTime() - ONE_DAY_IN_MILLISECONDS < Date.now()) {\n            return this.exchangeRefreshToken(requestOptions);\n        }\n        const options = Object.assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                grant_type: \"refresh_token\"\n            } }, requestOptions);\n        return (0,_fetch_token_js__WEBPACK_IMPORTED_MODULE_3__.fetchToken)(`${this.portal}/oauth2/token`, options)\n            .then((response) => {\n            return this.updateToken(response.token, response.expires);\n        })\n            .catch((e) => {\n            throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(e.message, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * Update the stored {@linkcode ArcGISIdentityManager.token} and {@linkcode ArcGISIdentityManager.tokenExpires} properties. This method is used internally when refreshing tokens.\n     * You may need to call this if you want update the token with a new token from an external source.\n     *\n     * @param newToken The new token to use for this instance of `ArcGISIdentityManager`.\n     * @param newTokenExpiration The new expiration date of the token.\n     * @returns\n     */\n    updateToken(newToken, newTokenExpiration) {\n        this._token = newToken;\n        this._tokenExpires = newTokenExpiration;\n        return this;\n    }\n    /**\n     * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n     * `tokenExpires`.\n     */\n    exchangeRefreshToken(requestOptions) {\n        const options = Object.assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                redirect_uri: this.redirectUri,\n                grant_type: \"exchange_refresh_token\"\n            } }, requestOptions);\n        return (0,_fetch_token_js__WEBPACK_IMPORTED_MODULE_3__.fetchToken)(`${this.portal}/oauth2/token`, options)\n            .then((response) => {\n            this._token = response.token;\n            this._tokenExpires = response.expires;\n            this._refreshToken = response.refreshToken;\n            this._refreshTokenExpires = response.refreshTokenExpires;\n            return this;\n        })\n            .catch((e) => {\n            throw new _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestError(e.message, _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_11__.ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n     * so we can check them later.\n     *\n     * @returns this\n     */\n    fetchAuthorizedDomains() {\n        // if this token is for a specific server or we don't have a portal\n        // don't get the portal info because we cant get the authorizedCrossOriginDomains\n        if (this.server || !this.portal) {\n            return Promise.resolve(this);\n        }\n        return this.getPortal().then((portalInfo) => {\n            /**\n             * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n             * normalizes to https://secure.esri.com so we can use startsWith later.\n             */\n            if (portalInfo.authorizedCrossOriginDomains &&\n                portalInfo.authorizedCrossOriginDomains.length) {\n                this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n                    .filter((d) => !d.startsWith(\"http://\"))\n                    .map((d) => {\n                    if (d.startsWith(\"https://\")) {\n                        return d;\n                    }\n                    else {\n                        return `https://${d}`;\n                    }\n                });\n            }\n            return this;\n        });\n    }\n}\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager}.\n * @internal\n *\n */ /* istanbul ignore next */\nfunction UserSession(options) {\n    console.log(\"DEPRECATED:, 'UserSession' is deprecated. Use 'ArcGISIdentityManager' instead.\");\n    return new ArcGISIdentityManager(options);\n}\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.beginOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.beginOAuth2 = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.beginOAuth2' is deprecated. Use 'ArcGISIdentityManager.beginOAuth2' instead.\");\n    return ArcGISIdentityManager.beginOAuth2(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.completeOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.completeOAuth2 = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.completeOAuth2' is deprecated. Use 'ArcGISIdentityManager.completeOAuth2' instead.\");\n    if (args.length <= 1) {\n        console.warn(\"WARNING:, 'UserSession.completeOAuth2' is now async and returns a promise the resolves to an instance of `ArcGISIdentityManager`.\");\n    }\n    return ArcGISIdentityManager.completeOAuth2(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromParent}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromParent = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.fromParent' is deprecated. Use 'ArcGISIdentityManager.fromParent' instead.\");\n    return ArcGISIdentityManager.fromParent(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.authorize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.authorize = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.authorize' is deprecated. Use 'ArcGISIdentityManager.authorize' instead.\");\n    return ArcGISIdentityManager.authorize(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.exchangeAuthorizationCode = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.exchangeAuthorizationCode' is deprecated. Use 'ArcGISIdentityManager.exchangeAuthorizationCode' instead.\");\n    return ArcGISIdentityManager.exchangeAuthorizationCode(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromCredential}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromCredential = function (...args) {\n    console.log(\"DEPRECATED:, 'UserSession.fromCredential' is deprecated. Use 'ArcGISIdentityManager.fromCredential' instead.\");\n    console.warn(\"WARNING:, 'UserSession.fromCredential' now requires a `ServerInfo` object from the JS API as a second parameter.\");\n    return ArcGISIdentityManager.fromCredential(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.deserialize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.deserialize = function (...args) {\n    console.log(\"DEPRECATED:, 'UserSession.deserialize' is deprecated. Use 'ArcGISIdentityManager.deserialize' instead.\");\n    return ArcGISIdentityManager.deserialize(...args);\n};\n\n//# sourceMappingURL=ArcGISIdentityManager.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/ArcGISIdentityManager.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/app-tokens.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/app-tokens.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"exchangeToken\": () => (/* binding */ exchangeToken),\n/* harmony export */   \"platformSelf\": () => (/* binding */ platformSelf)\n/* harmony export */ });\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./request.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/request.js\");\n/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Request app-specific token, passing in the token for the current app.\n *\n * This call returns a token after performing the same checks made by validateAppAccess.\n * It returns an app-specific token of the signed-in user only if the user has access\n * to the app and the encrypted platform cookie is valid.\n *\n * A scenario where an app would use this is if it is iframed into another platform app\n * and receives credentials via postMessage. Those credentials contain a token that is\n * specific to the host app, so the embedded app would use `exchangeToken` to get one\n * that is specific to itself.\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token\n * @param clientId application\n * @param portal\n */\nfunction exchangeToken(token, clientId, portal = \"https://www.arcgis.com/sharing/rest\") {\n    const url = `${portal}/oauth2/exchangeToken`;\n    const ro = {\n        method: \"POST\",\n        params: {\n            f: \"json\",\n            client_id: clientId,\n            token\n        }\n    };\n    // make the request and return the token\n    return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(url, ro).then((response) => response.token);\n}\n/**\n * Request a token for a specific application using the esri_aopc encrypted cookie\n *\n * When a client app boots up, it will know its clientId and the redirectUri for use\n * in the normal /oauth/authorize pop-out oAuth flow.\n *\n * If the app sees an `esri_aopc` cookie (only set if the app is hosted on *.arcgis.com),\n * it can call the /oauth2/platformSelf end-point passing in the clientId and redirectUri\n * in headers, and it will receive back an app-specific token, assuming the user has\n * access to the app.\n *\n * Since there are scenarios where an app can boot using credentials/token from localstorage\n * but those credentials are not for the same user as the esri_aopc cookie, it is recommended that\n * an app check the returned username against any existing identity they may have loaded.\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * ```js\n * // convert the encrypted platform cookie into a ArcGISIdentityManager\n * import { platformSelf, ArcGISIdentityManager } from '@esri/arcgis-rest-request';\n *\n * const portal = 'https://www.arcgis.com/sharing/rest';\n * const clientId = 'YOURAPPCLIENTID';\n *\n * // exchange esri_aopc cookie\n * return platformSelf(clientId, 'https://your-app-redirect-uri', portal)\n * .then((response) => {\n *  const currentTimestamp = new Date().getTime();\n *  const tokenExpiresTimestamp = currentTimestamp + (response.expires_in * 1000);\n *  // Construct the session and return it\n *  return new ArcGISIdentityManager({\n *    portal,\n *    clientId,\n *    username: response.username,\n *    token: response.token,\n *    tokenExpires: new Date(tokenExpiresTimestamp),\n *    ssl: true\n *  });\n * })\n *\n * ```\n *\n *\n * @param clientId\n * @param redirectUri\n * @param portal\n */\nfunction platformSelf(clientId, redirectUri, portal = \"https://www.arcgis.com/sharing/rest\") {\n    // TEMPORARY: the f=json should not be needed, but currently is\n    const url = `${portal}/oauth2/platformSelf?f=json`;\n    const ro = {\n        method: \"POST\",\n        headers: {\n            \"X-Esri-Auth-Client-Id\": clientId,\n            \"X-Esri-Auth-Redirect-Uri\": redirectUri\n        },\n        // Note: request has logic to include the cookie\n        // for platformSelf calls w/ the X-Esri-Auth-Client-Id header\n        params: {\n            f: \"json\"\n        }\n    };\n    // make the request and return the token\n    return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(url, ro);\n}\n//# sourceMappingURL=app-tokens.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/app-tokens.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/authenticated-request-options.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/authenticated-request-options.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=authenticated-request-options.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/authenticated-request-options.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/federation-utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/federation-utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"canUseOnlineToken\": () => (/* binding */ canUseOnlineToken),\n/* harmony export */   \"getOnlineEnvironment\": () => (/* binding */ getOnlineEnvironment),\n/* harmony export */   \"isFederated\": () => (/* binding */ isFederated),\n/* harmony export */   \"isOnline\": () => (/* binding */ isOnline),\n/* harmony export */   \"normalizeOnlinePortalUrl\": () => (/* binding */ normalizeOnlinePortalUrl)\n/* harmony export */ });\n/* harmony import */ var _utils_clean_url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/clean-url.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js\");\n\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex = /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex = /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.arcgis\\.com\\/sharing\\/rest/;\nfunction isOnline(url) {\n    return arcgisOnlineUrlRegex.test(url);\n}\nfunction normalizeOnlinePortalUrl(portalUrl) {\n    if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n        return portalUrl;\n    }\n    switch (getOnlineEnvironment(portalUrl)) {\n        case \"dev\":\n            return \"https://devext.arcgis.com/sharing/rest\";\n        case \"qa\":\n            return \"https://qaext.arcgis.com/sharing/rest\";\n        default:\n            return \"https://www.arcgis.com/sharing/rest\";\n    }\n}\nfunction getOnlineEnvironment(url) {\n    if (!arcgisOnlineUrlRegex.test(url)) {\n        return null;\n    }\n    const match = url.match(arcgisOnlineUrlRegex);\n    const subdomain = match[1].split(\".\").pop();\n    if (subdomain.includes(\"dev\")) {\n        return \"dev\";\n    }\n    if (subdomain.includes(\"qa\")) {\n        return \"qa\";\n    }\n    return \"production\";\n}\nfunction isFederated(owningSystemUrl, portalUrl) {\n    const normalizedPortalUrl = (0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_0__.cleanUrl)(normalizeOnlinePortalUrl(portalUrl)).replace(/https?:\\/\\//, \"\");\n    const normalizedOwningSystemUrl = (0,_utils_clean_url_js__WEBPACK_IMPORTED_MODULE_0__.cleanUrl)(owningSystemUrl).replace(/https?:\\/\\//, \"\");\n    return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\nfunction canUseOnlineToken(portalUrl, requestUrl) {\n    const portalIsOnline = isOnline(portalUrl);\n    const requestIsOnline = isOnline(requestUrl);\n    const portalEnv = getOnlineEnvironment(portalUrl);\n    const requestEnv = getOnlineEnvironment(requestUrl);\n    if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=federation-utils.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/federation-utils.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/fetch-token.js":
/*!************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/fetch-token.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fetchToken\": () => (/* binding */ fetchToken)\n/* harmony export */ });\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./request.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/request.js\");\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nconst FIVE_MINUTES_IN_MILLISECONDS = 5 * 60 * 1000;\nfunction fetchToken(url, requestOptions) {\n    const options = requestOptions;\n    // we generate a response, so we can't return the raw response\n    options.rawResponse = false;\n    return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(url, options).then((response) => {\n        const r = {\n            token: response.access_token,\n            username: response.username,\n            expires: new Date(\n            // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n            // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n            Date.now() + response.expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS),\n            ssl: response.ssl === true\n        };\n        if (response.refresh_token) {\n            r.refreshToken = response.refresh_token;\n        }\n        if (response.refresh_token_expires_in) {\n            r.refreshTokenExpires = new Date(\n            // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n            // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n            Date.now() +\n                response.refresh_token_expires_in * 1000 -\n                FIVE_MINUTES_IN_MILLISECONDS);\n        }\n        return r;\n    });\n}\n//# sourceMappingURL=fetch-token.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/fetch-token.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApiKey\": () => (/* reexport safe */ _ApiKeyManager_js__WEBPACK_IMPORTED_MODULE_25__.ApiKey),\n/* harmony export */   \"ApiKeyManager\": () => (/* reexport safe */ _ApiKeyManager_js__WEBPACK_IMPORTED_MODULE_25__.ApiKeyManager),\n/* harmony export */   \"ApplicationCredentialsManager\": () => (/* reexport safe */ _ApplicationCredentialsManager_js__WEBPACK_IMPORTED_MODULE_24__.ApplicationCredentialsManager),\n/* harmony export */   \"ApplicationSession\": () => (/* reexport safe */ _ApplicationCredentialsManager_js__WEBPACK_IMPORTED_MODULE_24__.ApplicationSession),\n/* harmony export */   \"ArcGISAccessDeniedError\": () => (/* reexport safe */ _utils_ArcGISAccessDeniedError_js__WEBPACK_IMPORTED_MODULE_4__.ArcGISAccessDeniedError),\n/* harmony export */   \"ArcGISAuthError\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_0__.ArcGISAuthError),\n/* harmony export */   \"ArcGISIdentityManager\": () => (/* reexport safe */ _ArcGISIdentityManager_js__WEBPACK_IMPORTED_MODULE_26__.ArcGISIdentityManager),\n/* harmony export */   \"ArcGISRequestError\": () => (/* reexport safe */ _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_2__.ArcGISRequestError),\n/* harmony export */   \"ArcGISTokenRequestError\": () => (/* reexport safe */ _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_3__.ArcGISTokenRequestError),\n/* harmony export */   \"ArcGISTokenRequestErrorCodes\": () => (/* reexport safe */ _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_3__.ArcGISTokenRequestErrorCodes),\n/* harmony export */   \"Blob\": () => (/* reexport safe */ _esri_arcgis_rest_form_data__WEBPACK_IMPORTED_MODULE_41__.Blob),\n/* harmony export */   \"ErrorTypes\": () => (/* reexport safe */ _utils_ErrorTypes_js__WEBPACK_IMPORTED_MODULE_9__.ErrorTypes),\n/* harmony export */   \"File\": () => (/* reexport safe */ _esri_arcgis_rest_form_data__WEBPACK_IMPORTED_MODULE_41__.File),\n/* harmony export */   \"FormData\": () => (/* reexport safe */ _esri_arcgis_rest_form_data__WEBPACK_IMPORTED_MODULE_41__.FormData),\n/* harmony export */   \"NODEJS_DEFAULT_REFERER_HEADER\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_0__.NODEJS_DEFAULT_REFERER_HEADER),\n/* harmony export */   \"UserSession\": () => (/* reexport safe */ _ArcGISIdentityManager_js__WEBPACK_IMPORTED_MODULE_26__.UserSession),\n/* harmony export */   \"appendCustomParams\": () => (/* reexport safe */ _utils_append_custom_params_js__WEBPACK_IMPORTED_MODULE_1__.appendCustomParams),\n/* harmony export */   \"canUseOnlineToken\": () => (/* reexport safe */ _federation_utils_js__WEBPACK_IMPORTED_MODULE_31__.canUseOnlineToken),\n/* harmony export */   \"checkForErrors\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_0__.checkForErrors),\n/* harmony export */   \"cleanUrl\": () => (/* reexport safe */ _utils_clean_url_js__WEBPACK_IMPORTED_MODULE_5__.cleanUrl),\n/* harmony export */   \"decodeParam\": () => (/* reexport safe */ _utils_decode_query_string_js__WEBPACK_IMPORTED_MODULE_8__.decodeParam),\n/* harmony export */   \"decodeQueryString\": () => (/* reexport safe */ _utils_decode_query_string_js__WEBPACK_IMPORTED_MODULE_8__.decodeQueryString),\n/* harmony export */   \"encodeFormData\": () => (/* reexport safe */ _utils_encode_form_data_js__WEBPACK_IMPORTED_MODULE_6__.encodeFormData),\n/* harmony export */   \"encodeParam\": () => (/* reexport safe */ _utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_7__.encodeParam),\n/* harmony export */   \"encodeQueryString\": () => (/* reexport safe */ _utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_7__.encodeQueryString),\n/* harmony export */   \"exchangeToken\": () => (/* reexport safe */ _app_tokens_js__WEBPACK_IMPORTED_MODULE_29__.exchangeToken),\n/* harmony export */   \"fetchToken\": () => (/* reexport safe */ _fetch_token_js__WEBPACK_IMPORTED_MODULE_27__.fetchToken),\n/* harmony export */   \"getDefaultRequestOptions\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultRequestOptions),\n/* harmony export */   \"getFetch\": () => (/* reexport safe */ _esri_arcgis_rest_fetch__WEBPACK_IMPORTED_MODULE_40__.getFetch),\n/* harmony export */   \"getOnlineEnvironment\": () => (/* reexport safe */ _federation_utils_js__WEBPACK_IMPORTED_MODULE_31__.getOnlineEnvironment),\n/* harmony export */   \"internalRequest\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_0__.internalRequest),\n/* harmony export */   \"isFederated\": () => (/* reexport safe */ _federation_utils_js__WEBPACK_IMPORTED_MODULE_31__.isFederated),\n/* harmony export */   \"isOnline\": () => (/* reexport safe */ _federation_utils_js__WEBPACK_IMPORTED_MODULE_31__.isOnline),\n/* harmony export */   \"normalizeOnlinePortalUrl\": () => (/* reexport safe */ _federation_utils_js__WEBPACK_IMPORTED_MODULE_31__.normalizeOnlinePortalUrl),\n/* harmony export */   \"platformSelf\": () => (/* reexport safe */ _app_tokens_js__WEBPACK_IMPORTED_MODULE_29__.platformSelf),\n/* harmony export */   \"processParams\": () => (/* reexport safe */ _utils_process_params_js__WEBPACK_IMPORTED_MODULE_20__.processParams),\n/* harmony export */   \"request\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_0__.request),\n/* harmony export */   \"requiresFormData\": () => (/* reexport safe */ _utils_process_params_js__WEBPACK_IMPORTED_MODULE_20__.requiresFormData),\n/* harmony export */   \"revokeToken\": () => (/* reexport safe */ _revoke_token_js__WEBPACK_IMPORTED_MODULE_32__.revokeToken),\n/* harmony export */   \"setDefaultRequestOptions\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_0__.setDefaultRequestOptions),\n/* harmony export */   \"validateAppAccess\": () => (/* reexport safe */ _validate_app_access_js__WEBPACK_IMPORTED_MODULE_30__.validateAppAccess),\n/* harmony export */   \"warn\": () => (/* reexport safe */ _utils_warn_js__WEBPACK_IMPORTED_MODULE_23__.warn),\n/* harmony export */   \"withOptions\": () => (/* reexport safe */ _utils_with_options_js__WEBPACK_IMPORTED_MODULE_33__.withOptions)\n/* harmony export */ });\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./request.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/request.js\");\n/* harmony import */ var _utils_append_custom_params_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/append-custom-params.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/append-custom-params.js\");\n/* harmony import */ var _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/ArcGISRequestError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js\");\n/* harmony import */ var _utils_ArcGISTokenRequestError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/ArcGISTokenRequestError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISTokenRequestError.js\");\n/* harmony import */ var _utils_ArcGISAccessDeniedError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/ArcGISAccessDeniedError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISAccessDeniedError.js\");\n/* harmony import */ var _utils_clean_url_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/clean-url.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js\");\n/* harmony import */ var _utils_encode_form_data_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/encode-form-data.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js\");\n/* harmony import */ var _utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/encode-query-string.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js\");\n/* harmony import */ var _utils_decode_query_string_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/decode-query-string.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/decode-query-string.js\");\n/* harmony import */ var _utils_ErrorTypes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/ErrorTypes.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ErrorTypes.js\");\n/* harmony import */ var _utils_GrantTypes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/GrantTypes.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/GrantTypes.js\");\n/* harmony import */ var _utils_HTTPMethods_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/HTTPMethods.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/HTTPMethods.js\");\n/* harmony import */ var _utils_IAuthenticationManager_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/IAuthenticationManager.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IAuthenticationManager.js\");\n/* harmony import */ var _utils_IFetchTokenParams_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/IFetchTokenParams.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IFetchTokenParams.js\");\n/* harmony import */ var _utils_IGenerateTokenParams_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/IGenerateTokenParams.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IGenerateTokenParams.js\");\n/* harmony import */ var _utils_IParams_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/IParams.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParams.js\");\n/* harmony import */ var _utils_IParamBuilder_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/IParamBuilder.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamBuilder.js\");\n/* harmony import */ var _utils_IParamsBuilder_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/IParamsBuilder.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamsBuilder.js\");\n/* harmony import */ var _utils_IRequestOptions_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/IRequestOptions.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IRequestOptions.js\");\n/* harmony import */ var _utils_ITokenRequestOptions_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/ITokenRequestOptions.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ITokenRequestOptions.js\");\n/* harmony import */ var _utils_process_params_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/process-params.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js\");\n/* harmony import */ var _utils_ResponseFormats_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/ResponseFormats.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ResponseFormats.js\");\n/* harmony import */ var _utils_retryAuthError_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/retryAuthError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/retryAuthError.js\");\n/* harmony import */ var _utils_warn_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./utils/warn.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js\");\n/* harmony import */ var _ApplicationCredentialsManager_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./ApplicationCredentialsManager.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/ApplicationCredentialsManager.js\");\n/* harmony import */ var _ApiKeyManager_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ApiKeyManager.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/ApiKeyManager.js\");\n/* harmony import */ var _ArcGISIdentityManager_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./ArcGISIdentityManager.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/ArcGISIdentityManager.js\");\n/* harmony import */ var _fetch_token_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./fetch-token.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/fetch-token.js\");\n/* harmony import */ var _authenticated_request_options_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./authenticated-request-options.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/authenticated-request-options.js\");\n/* harmony import */ var _app_tokens_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./app-tokens.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/app-tokens.js\");\n/* harmony import */ var _validate_app_access_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./validate-app-access.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/validate-app-access.js\");\n/* harmony import */ var _federation_utils_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./federation-utils.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/federation-utils.js\");\n/* harmony import */ var _revoke_token_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./revoke-token.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/revoke-token.js\");\n/* harmony import */ var _utils_with_options_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./utils/with-options.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/with-options.js\");\n/* harmony import */ var _types_feature_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./types/feature.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/types/feature.js\");\n/* harmony import */ var _types_geometry_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./types/geometry.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/types/geometry.js\");\n/* harmony import */ var _types_symbol_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./types/symbol.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/types/symbol.js\");\n/* harmony import */ var _types_service_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./types/service.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/types/service.js\");\n/* harmony import */ var _types_group_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./types/group.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/types/group.js\");\n/* harmony import */ var _types_user_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./types/user.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/types/user.js\");\n/* harmony import */ var _esri_arcgis_rest_fetch__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @esri/arcgis-rest-fetch */ \"./node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.mjs\");\n/* harmony import */ var _esri_arcgis_rest_form_data__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @esri/arcgis-rest-form-data */ \"./node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.mjs\");\n/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/index.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/request.js":
/*!********************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/request.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArcGISAuthError\": () => (/* binding */ ArcGISAuthError),\n/* harmony export */   \"NODEJS_DEFAULT_REFERER_HEADER\": () => (/* binding */ NODEJS_DEFAULT_REFERER_HEADER),\n/* harmony export */   \"checkForErrors\": () => (/* binding */ checkForErrors),\n/* harmony export */   \"getDefaultRequestOptions\": () => (/* binding */ getDefaultRequestOptions),\n/* harmony export */   \"internalRequest\": () => (/* binding */ internalRequest),\n/* harmony export */   \"request\": () => (/* binding */ request),\n/* harmony export */   \"setDefaultRequestOptions\": () => (/* binding */ setDefaultRequestOptions)\n/* harmony export */ });\n/* harmony import */ var _utils_encode_form_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/encode-form-data.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js\");\n/* harmony import */ var _utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/encode-query-string.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js\");\n/* harmony import */ var _utils_process_params_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/process-params.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js\");\n/* harmony import */ var _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/ArcGISRequestError.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js\");\n/* harmony import */ var _utils_warn_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/warn.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js\");\n/* harmony import */ var _esri_arcgis_rest_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @esri/arcgis-rest-fetch */ \"./node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.mjs\");\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n\n\n\n\n\nconst NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n *\n * setDefaultRequestOptions({\n *   authentication: ArcGISIdentityManager // all requests will use this session by default\n * })\n * ```\n *\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nfunction setDefaultRequestOptions(options, hideWarnings) {\n    if (options.authentication && !hideWarnings) {\n        (0,_utils_warn_js__WEBPACK_IMPORTED_MODULE_4__.warn)(\"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\");\n    }\n    globalThis.DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\nfunction getDefaultRequestOptions() {\n    return (globalThis.DEFAULT_ARCGIS_REQUEST_OPTIONS || {\n        httpMethod: \"POST\",\n        params: {\n            f: \"json\"\n        }\n    });\n}\n/**\n * This error is thrown when a request encounters an invalid token error. Requests that use {@linkcode ArcGISIdentityManager} or\n * {@linkcode ApplicationCredentialsManager} in the `authentication` option the authentication manager will automatically try to generate\n * a fresh token using either {@linkcode ArcGISIdentityManager.refreshCredentials} or\n * {@linkcode ApplicationCredentialsManager.refreshCredentials}. If the request with the new token fails you will receive an `ArcGISAuthError`\n * if refreshing the token fails you will receive an instance of {@linkcode ArcGISTokenRequestError}.\n *\n * ```js\n * request(someUrl, {\n *   authentication: identityManager,\n *   // some additional options...\n * }).catch(e => {\n *   if(e.name === \"ArcGISAuthError\") {\n *     console.log(\"Request with a new token failed you might want to have the user authorize again.\")\n *   }\n *\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     console.log(\"There was an error refreshing the token you might want to have the user authorize again.\")\n *   }\n * })\n * ```\n */\nclass ArcGISAuthError extends _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_3__.ArcGISRequestError {\n    /**\n     * Create a new `ArcGISAuthError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options of the request\n     */\n    constructor(message = \"AUTHENTICATION_ERROR\", code = \"AUTHENTICATION_ERROR_CODE\", response, url, options) {\n        super(message, code, response, url, options);\n        this.name = \"ArcGISAuthError\";\n        this.message =\n            code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n    }\n    retry(getSession, retryLimit = 1) {\n        let tries = 0;\n        const retryRequest = (resolve, reject) => {\n            tries = tries + 1;\n            getSession(this.url, this.options)\n                .then((session) => {\n                const newOptions = Object.assign(Object.assign({}, this.options), { authentication: session });\n                return internalRequest(this.url, newOptions);\n            })\n                .then((response) => {\n                resolve(response);\n            })\n                .catch((e) => {\n                if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n                    retryRequest(resolve, reject);\n                }\n                else if (e.name === this.name &&\n                    e.message === this.message &&\n                    tries >= retryLimit) {\n                    reject(this);\n                }\n                else {\n                    reject(e);\n                }\n            });\n        };\n        return new Promise((resolve, reject) => {\n            retryRequest(resolve, reject);\n        });\n    }\n}\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nfunction checkForErrors(response, url, params, options, originalAuthError) {\n    // this is an error message from billing.arcgis.com backend\n    if (response.code >= 400) {\n        const { message, code } = response;\n        throw new _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_3__.ArcGISRequestError(message, code, response, url, options);\n    }\n    // error from ArcGIS Online or an ArcGIS Portal or server instance.\n    if (response.error) {\n        const { message, code, messageCode } = response.error;\n        const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n        if (code === 498 || code === 499) {\n            if (originalAuthError) {\n                throw originalAuthError;\n            }\n            else {\n                throw new ArcGISAuthError(message, errorCode, response, url, options);\n            }\n        }\n        throw new _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_3__.ArcGISRequestError(message, errorCode, response, url, options);\n    }\n    // error from a status check\n    if (response.status === \"failed\" || response.status === \"failure\") {\n        let message;\n        let code = \"UNKNOWN_ERROR_CODE\";\n        try {\n            message = JSON.parse(response.statusMessage).message;\n            code = JSON.parse(response.statusMessage).code;\n        }\n        catch (e) {\n            message = response.statusMessage || response.message;\n        }\n        throw new _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_3__.ArcGISRequestError(message, code, response, url, options);\n    }\n    return response;\n}\n/**\n * This is the internal implementation of `request` without the automatic retry behavior to prevent\n * infinite loops when a server continues to return invalid token errors.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n * @internal\n */\nfunction internalRequest(url, requestOptions) {\n    const defaults = getDefaultRequestOptions();\n    const options = Object.assign(Object.assign(Object.assign({ httpMethod: \"POST\" }, defaults), requestOptions), {\n        params: Object.assign(Object.assign({}, defaults.params), requestOptions.params),\n        headers: Object.assign(Object.assign({}, defaults.headers), requestOptions.headers)\n    });\n    const { httpMethod, rawResponse } = options;\n    const params = Object.assign({ f: \"json\" }, options.params);\n    let originalAuthError = null;\n    const fetchOptions = {\n        method: httpMethod,\n        signal: options.signal,\n        /* ensures behavior mimics XMLHttpRequest.\n        needed to support sending IWA cookies */\n        credentials: options.credentials || \"same-origin\"\n    };\n    // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n    // and that request needs to send cookies cross domain\n    // so we need to set the credentials to \"include\"\n    if (options.headers &&\n        options.headers[\"X-Esri-Auth-Client-Id\"] &&\n        url.indexOf(\"/oauth2/platformSelf\") > -1) {\n        fetchOptions.credentials = \"include\";\n    }\n    let authentication;\n    // Check to see if this is a raw token as a string and create a IAuthenticationManager like object for it.\n    // Otherwise this just assumes that options.authentication is an IAuthenticationManager.\n    if (typeof options.authentication === \"string\") {\n        const rawToken = options.authentication;\n        authentication = {\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            getToken: () => {\n                return Promise.resolve(rawToken);\n            }\n        };\n        /* istanbul ignore else - we don't need to test NOT warning people */\n        if (!options.authentication.startsWith(\"AAPK\") && // doesn't look like an API Key\n            !options.suppressWarnings && // user doesn't want to suppress warnings for this request\n            !globalThis.ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING // we havn't shown the user this warning yet\n        ) {\n            (0,_utils_warn_js__WEBPACK_IMPORTED_MODULE_4__.warn)(`Using an oAuth 2.0 access token directly in the token option is discouraged. Consider using ArcGISIdentityManager or Application session. See https://esriurl.com/arcgis-rest-js-direct-token-warning for more information.`);\n            globalThis.ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING = true;\n        }\n    }\n    else {\n        authentication = options.authentication;\n    }\n    // for errors in GET requests we want the URL passed to the error to be the URL before\n    // query params are applied.\n    const originalUrl = url;\n    return (authentication\n        ? authentication.getToken(url).catch((err) => {\n            /**\n             * append original request url and requestOptions\n             * to the error thrown by getToken()\n             * to assist with retrying\n             */\n            err.url = url;\n            err.options = options;\n            /**\n             * if an attempt is made to talk to an unfederated server\n             * first try the request anonymously. if a 'token required'\n             * error is thrown, throw the UNFEDERATED error then.\n             */\n            originalAuthError = err;\n            return Promise.resolve(\"\");\n        })\n        : Promise.resolve(\"\"))\n        .then((token) => {\n        if (token.length) {\n            params.token = token;\n        }\n        if (authentication && authentication.getDomainCredentials) {\n            fetchOptions.credentials = authentication.getDomainCredentials(url);\n        }\n        // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n        const requestHeaders = {};\n        if (fetchOptions.method === \"GET\") {\n            // Prevents token from being passed in query params when hideToken option is used.\n            /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n            if (params.token &&\n                options.hideToken &&\n                // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n                typeof window === \"undefined\") {\n                requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n                delete params.token;\n            }\n            // encode the parameters into the query string\n            const queryParams = (0,_utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_1__.encodeQueryString)(params);\n            // dont append a '?' unless parameters are actually present\n            const urlWithQueryString = queryParams === \"\" ? url : url + \"?\" + (0,_utils_encode_query_string_js__WEBPACK_IMPORTED_MODULE_1__.encodeQueryString)(params);\n            if (\n            // This would exceed the maximum length for URLs specified by the consumer and requires POST\n            (options.maxUrlLength &&\n                urlWithQueryString.length > options.maxUrlLength) ||\n                // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n                (params.token && options.hideToken)) {\n                // the consumer specified a maximum length for URLs\n                // and this would exceed it, so use post instead\n                fetchOptions.method = \"POST\";\n                // If the token was already added as a Auth header, add the token back to body with other params instead of header\n                if (token.length && options.hideToken) {\n                    params.token = token;\n                    // Remove existing header that was added before url query length was checked\n                    delete requestHeaders[\"X-Esri-Authorization\"];\n                }\n            }\n            else {\n                // just use GET\n                url = urlWithQueryString;\n            }\n        }\n        /* updateResources currently requires FormData even when the input parameters dont warrant it.\n    https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n        see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n        const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n        if (fetchOptions.method === \"POST\") {\n            fetchOptions.body = (0,_utils_encode_form_data_js__WEBPACK_IMPORTED_MODULE_0__.encodeFormData)(params, forceFormData);\n        }\n        // Mixin headers from request options\n        fetchOptions.headers = Object.assign(Object.assign({}, requestHeaders), options.headers);\n        // This should have the same conditional for Node JS as ArcGISIdentityManager.refreshWithUsernameAndPassword()\n        // to ensure that generated tokens have the same referer when used in Node with a username and password.\n        /* istanbul ignore next - karma reports coverage on browser tests only */\n        if ((typeof window === \"undefined\" ||\n            (window && typeof window.document === \"undefined\")) &&\n            !fetchOptions.headers.referer) {\n            fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n        }\n        /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n        if (!(0,_utils_process_params_js__WEBPACK_IMPORTED_MODULE_2__.requiresFormData)(params) && !forceFormData) {\n            fetchOptions.headers[\"Content-Type\"] =\n                \"application/x-www-form-urlencoded\";\n        }\n        /**\n         * Check for a global fetch first and use it if available. This allows us to use the default\n         * configuration of fetch-mock in tests.\n         */\n        /* istanbul ignore next coverage is based on browser code and we don't test for the absence of global fetch so we can skip the else here. */\n        return globalThis.fetch\n            ? globalThis.fetch(url, fetchOptions)\n            : (0,_esri_arcgis_rest_fetch__WEBPACK_IMPORTED_MODULE_5__.getFetch)().then(({ fetch }) => {\n                return fetch(url, fetchOptions);\n            });\n    })\n        .then((response) => {\n        if (!response.ok) {\n            // server responded w/ an actual error (404, 500, etc)\n            const { status, statusText } = response;\n            throw new _utils_ArcGISRequestError_js__WEBPACK_IMPORTED_MODULE_3__.ArcGISRequestError(statusText, `HTTP ${status}`, response, url, options);\n        }\n        if (rawResponse) {\n            return response;\n        }\n        switch (params.f) {\n            case \"json\":\n                return response.json();\n            case \"geojson\":\n                return response.json();\n            case \"html\":\n                return response.text();\n            case \"text\":\n                return response.text();\n            /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n            default:\n                return response.blob();\n        }\n    })\n        .then((data) => {\n        if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n            const response = checkForErrors(data, originalUrl, params, options, originalAuthError);\n            if (originalAuthError) {\n                /* If the request was made to an unfederated service that\n                didn't require authentication, add the base url and a dummy token\n                to the list of trusted servers to avoid another federation check\n                in the event of a repeat request */\n                const truncatedUrl = url\n                    .toLowerCase()\n                    .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n                options.authentication.federatedServers[truncatedUrl] = {\n                    token: [],\n                    // default to 24 hours\n                    expires: new Date(Date.now() + 86400 * 1000)\n                };\n                originalAuthError = null;\n            }\n            return response;\n        }\n        else {\n            return data;\n        }\n    });\n}\n/**\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n *\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n *\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nfunction request(url, requestOptions = { params: { f: \"json\" } }) {\n    return internalRequest(url, requestOptions).catch((e) => {\n        if (e instanceof ArcGISAuthError &&\n            requestOptions.authentication &&\n            typeof requestOptions.authentication !== \"string\" &&\n            requestOptions.authentication.canRefresh &&\n            requestOptions.authentication.refreshCredentials) {\n            return e.retry(() => {\n                return requestOptions.authentication.refreshCredentials();\n            }, 1);\n        }\n        else {\n            return Promise.reject(e);\n        }\n    });\n}\n//# sourceMappingURL=request.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/request.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/revoke-token.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/revoke-token.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"revokeToken\": () => (/* binding */ revokeToken)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/index.js\");\n\n/**\n * Revokes a token generated via any oAuth 2.0 method. `token` can be either a refresh token OR an access token. If you are using  {@linkcode ArcGISIdentityManager} you should use  {@linkcode ArcGISIdentityManager.destroy} instead. Cannot revoke API keys or tokens generated by {@linkcode ApplicationCredentialsManager}.\n *\n * See [`revokeToken`](https://developers.arcgis.com/rest/users-groups-and-items/revoke-token.htm) on the ArcGIS REST API for more details.\n */\nfunction revokeToken(requestOptions) {\n    const url = `${(0,_index_js__WEBPACK_IMPORTED_MODULE_0__.cleanUrl)(requestOptions.portal || \"https://www.arcgis.com/sharing/rest\")}/oauth2/revokeToken/`;\n    const token = requestOptions.token;\n    const clientId = requestOptions.clientId;\n    delete requestOptions.portal;\n    delete requestOptions.clientId;\n    delete requestOptions.token;\n    const options = Object.assign(Object.assign({}, requestOptions), { httpMethod: \"POST\", params: {\n            client_id: clientId,\n            auth_token: token\n        } });\n    return (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.request)(url, options).then((response) => {\n        if (!response.success) {\n            throw new _index_js__WEBPACK_IMPORTED_MODULE_0__.ArcGISRequestError(\"Unable to revoke token\", 500, response, url, options);\n        }\n        return response;\n    });\n}\n//# sourceMappingURL=revoke-token.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/revoke-token.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/types/feature.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/types/feature.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=feature.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/types/feature.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/types/geometry.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/types/geometry.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=geometry.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/types/geometry.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/types/group.js":
/*!************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/types/group.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=group.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/types/group.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/types/service.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/types/service.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=service.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/types/service.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/types/symbol.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/types/symbol.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=symbol.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/types/symbol.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/types/user.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/types/user.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=user.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/types/user.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISAccessDeniedError.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISAccessDeniedError.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArcGISAccessDeniedError\": () => (/* binding */ ArcGISAccessDeniedError)\n/* harmony export */ });\n/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * This error code will be thrown by the following methods when the user cancels or denies an authorization request on the OAuth 2.0\n * authorization screen.\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} when the `popup` option is `true`\n * * {@linkcode ArcGISIdentityManager.completeOAuth2}  when the `popup` option is `false`\n *\n * ```js\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * ArcGISIdentityManager.beginOAuth2({\n *   clientId: \"***\"\n *   redirectUri: \"***\",\n *   popup: true\n * }).then(authenticationManager => {\n *   console.log(\"OAuth 2.0 Successful\");\n * }).catch(e => {\n *   if(e.name === \"ArcGISAccessDeniedError\") {\n *     console.log(\"The user did not authorize your app.\")\n *   } else {\n *     console.log(\"Something else went wrong. Error:\", e);\n *   }\n * })\n * ```\n */\nclass ArcGISAccessDeniedError extends Error {\n    /**\n     * Create a new `ArcGISAccessDeniedError`  object.\n     */\n    constructor() {\n        const message = \"The user has denied your authorization request.\";\n        super(message);\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n        this.name = \"ArcGISAccessDeniedError\";\n    }\n}\n//# sourceMappingURL=ArcGISAccessDeniedError.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISAccessDeniedError.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArcGISRequestError\": () => (/* binding */ ArcGISRequestError)\n/* harmony export */ });\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * This represents a generic error from an ArcGIS endpoint. There will be details about the error in the {@linkcode ArcGISRequestError.message},  {@linkcode ArcGISRequestError.originalMessage} properties on the error. You\n * can also access the original server response at  {@linkcode ArcGISRequestError.response} which may have additional details.\n *\n * ```js\n * request(someUrl, someOptions).catch(e => {\n *   if(e.name === \"ArcGISRequestError\") {\n *     console.log(\"Something went wrong with the request:\", e);\n *     console.log(\"Full server response\", e.response);\n *   }\n * })\n * ```\n */\nclass ArcGISRequestError extends Error {\n    /**\n     * Create a new `ArcGISRequestError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options and parameters of the request\n     */\n    constructor(message, code, response, url, options) {\n        // 'Error' breaks prototype chain here\n        super(message);\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n        message = message || \"UNKNOWN_ERROR\";\n        code = code || \"UNKNOWN_ERROR_CODE\";\n        this.name = \"ArcGISRequestError\";\n        this.message =\n            code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n        this.originalMessage = message;\n        this.code = code;\n        this.response = response;\n        this.url = url;\n        this.options = options;\n    }\n}\n//# sourceMappingURL=ArcGISRequestError.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISTokenRequestError.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISTokenRequestError.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArcGISTokenRequestError\": () => (/* binding */ ArcGISTokenRequestError),\n/* harmony export */   \"ArcGISTokenRequestErrorCodes\": () => (/* binding */ ArcGISTokenRequestErrorCodes)\n/* harmony export */ });\n/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * There are 5 potential error codes that might be thrown by {@linkcode ArcGISTokenRequestError}. 2 of these codes are used by both\n * {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager}:\n *\n * * `TOKEN_REFRESH_FAILED` when a request for an new access token fails.\n * * `UNKNOWN_ERROR_CODE` the error is unknown. More information may be available in {@linkcode ArcGISTokenRequestError.response}\n *\n * The 3 remaining error codes will only be thrown when using {@linkcode ArcGISIdentityManager}:\n *\n * * `GENERATE_TOKEN_FOR_SERVER_FAILED` when a request for a token for a specific federated server fails.\n * * `REFRESH_TOKEN_EXCHANGE_FAILED` when a request for a new refresh token fails.\n * * `NOT_FEDERATED` when the requested server isn't federated with the portal specified in {@linkcode ArcGISIdentityManager.portal}.\n */\nvar ArcGISTokenRequestErrorCodes;\n(function (ArcGISTokenRequestErrorCodes) {\n    ArcGISTokenRequestErrorCodes[\"TOKEN_REFRESH_FAILED\"] = \"TOKEN_REFRESH_FAILED\";\n    ArcGISTokenRequestErrorCodes[\"GENERATE_TOKEN_FOR_SERVER_FAILED\"] = \"GENERATE_TOKEN_FOR_SERVER_FAILED\";\n    ArcGISTokenRequestErrorCodes[\"REFRESH_TOKEN_EXCHANGE_FAILED\"] = \"REFRESH_TOKEN_EXCHANGE_FAILED\";\n    ArcGISTokenRequestErrorCodes[\"NOT_FEDERATED\"] = \"NOT_FEDERATED\";\n    ArcGISTokenRequestErrorCodes[\"UNKNOWN_ERROR_CODE\"] = \"UNKNOWN_ERROR_CODE\";\n})(ArcGISTokenRequestErrorCodes || (ArcGISTokenRequestErrorCodes = {}));\n/**\n * This error is thrown when {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager} fails to refresh a token or generate a new token\n * for a request. Generally in this scenario the credentials are invalid for the request and the you should recreate the {@linkcode ApplicationCredentialsManager}\n * or prompt the user to authenticate again with {@linkcode ArcGISIdentityManager}. See {@linkcode ArcGISTokenRequestErrorCodes} for a more detailed description of\n * the possible error codes.\n *\n * ```js\n * request(someUrl, {\n *   authentication: someAuthenticationManager\n * }).catch(e => {\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     // ArcGIS REST JS could not generate an appropriate token for this request\n *     // All credentials are likely invalid and the authentication process should be restarted\n *   }\n * })\n * ```\n */\nclass ArcGISTokenRequestError extends Error {\n    /**\n     * Create a new `ArcGISTokenRequestError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options and parameters of the request\n     */\n    constructor(message = \"UNKNOWN_ERROR\", code = ArcGISTokenRequestErrorCodes.UNKNOWN_ERROR_CODE, response, url, options) {\n        // 'Error' breaks prototype chain here\n        super(message);\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n        this.name = \"ArcGISTokenRequestError\";\n        this.message = `${code}: ${message}`;\n        this.originalMessage = message;\n        this.code = code;\n        this.response = response;\n        this.url = url;\n        this.options = options;\n    }\n}\n//# sourceMappingURL=ArcGISTokenRequestError.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISTokenRequestError.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ErrorTypes.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ErrorTypes.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ErrorTypes\": () => (/* binding */ ErrorTypes)\n/* harmony export */ });\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     case ErrorType.ArcGISAccessDeniedError:\n *     // handle a user denying an authorization request in an oAuth workflow\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nvar ErrorTypes;\n(function (ErrorTypes) {\n    ErrorTypes[\"ArcGISRequestError\"] = \"ArcGISRequestError\";\n    ErrorTypes[\"ArcGISAuthError\"] = \"ArcGISAuthError\";\n    ErrorTypes[\"ArcGISAccessDeniedError\"] = \"ArcGISAccessDeniedError\";\n    ErrorTypes[\"ArcGISTokenRequestError\"] = \"ArcGISTokenRequestError\";\n})(ErrorTypes || (ErrorTypes = {}));\n//# sourceMappingURL=ErrorTypes.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ErrorTypes.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/GrantTypes.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/GrantTypes.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=GrantTypes.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/GrantTypes.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/HTTPMethods.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/HTTPMethods.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=HTTPMethods.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/HTTPMethods.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IAuthenticationManager.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IAuthenticationManager.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=IAuthenticationManager.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IAuthenticationManager.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IFetchTokenParams.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IFetchTokenParams.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=IFetchTokenParams.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IFetchTokenParams.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IGenerateTokenParams.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IGenerateTokenParams.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=IGenerateTokenParams.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IGenerateTokenParams.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamBuilder.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamBuilder.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=IParamBuilder.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamBuilder.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParams.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParams.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=IParams.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParams.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamsBuilder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamsBuilder.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=IParamsBuilder.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IParamsBuilder.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IRequestOptions.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IRequestOptions.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=IRequestOptions.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/IRequestOptions.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ITokenRequestOptions.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ITokenRequestOptions.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=ITokenRequestOptions.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ITokenRequestOptions.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ResponseFormats.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ResponseFormats.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=ResponseFormats.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ResponseFormats.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/append-custom-params.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/append-custom-params.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"appendCustomParams\": () => (/* binding */ appendCustomParams)\n/* harmony export */ });\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nfunction appendCustomParams(customOptions, keys, baseOptions) {\n    const requestOptionsKeys = [\n        \"params\",\n        \"httpMethod\",\n        \"rawResponse\",\n        \"authentication\",\n        \"portal\",\n        \"fetch\",\n        \"maxUrlLength\",\n        \"headers\",\n    ];\n    const options = Object.assign(Object.assign({ params: {} }, baseOptions), customOptions);\n    // merge all keys in customOptions into options.params\n    options.params = keys.reduce((value, key) => {\n        if (customOptions[key] ||\n            typeof customOptions[key] === \"boolean\" ||\n            (typeof customOptions[key] === \"number\" && customOptions[key] === 0)) {\n            value[key] = customOptions[key];\n        }\n        return value;\n    }, options.params);\n    // now remove all properties in options that don't exist in IRequestOptions\n    return requestOptionsKeys.reduce((value, key) => {\n        if (options[key]) {\n            value[key] = options[key];\n        }\n        return value;\n    }, {});\n}\n//# sourceMappingURL=append-custom-params.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/append-custom-params.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/base-64-url.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/base-64-url.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"base64UrlEncode\": () => (/* binding */ base64UrlEncode)\n/* harmony export */ });\n/**\n * Encodes a `Uint8Array` to base 64. Used internally for hashing the `code_verifier` and `code_challenge` for PKCE.\n */\nfunction base64UrlEncode(value, win = window) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n        win = window;\n    }\n    return win\n        .btoa(String.fromCharCode.apply(null, value))\n        .replace(/\\+/g, \"-\") // replace + with -\n        .replace(/\\//g, \"_\") // replace / with _\n        .replace(/=+$/, \"\"); // trim trailing =\n}\n//# sourceMappingURL=base-64-url.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/base-64-url.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cleanUrl\": () => (/* binding */ cleanUrl)\n/* harmony export */ });\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nfunction cleanUrl(url) {\n    // Guard so we don't try to trim something that's not a string\n    if (typeof url !== \"string\") {\n        return url;\n    }\n    // trim leading and trailing spaces, but not spaces inside the url\n    url = url.trim();\n    // remove the trailing slash to the url if one was included\n    if (url[url.length - 1] === \"/\") {\n        url = url.slice(0, -1);\n    }\n    return url;\n}\n//# sourceMappingURL=clean-url.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/decode-query-string.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/decode-query-string.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decodeParam\": () => (/* binding */ decodeParam),\n/* harmony export */   \"decodeQueryString\": () => (/* binding */ decodeQueryString)\n/* harmony export */ });\n/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nfunction decodeParam(param) {\n    const [key, value] = param.split(\"=\");\n    return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nfunction decodeQueryString(query) {\n    if (!query || query.length <= 0) {\n        return {};\n    }\n    return query\n        .replace(/^#/, \"\")\n        .replace(/^\\?/, \"\")\n        .split(\"&\")\n        .reduce((acc, entry) => {\n        const { key, value } = decodeParam(entry);\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n//# sourceMappingURL=decode-query-string.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/decode-query-string.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"encodeFormData\": () => (/* binding */ encodeFormData)\n/* harmony export */ });\n/* harmony import */ var _process_params_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process-params.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js\");\n/* harmony import */ var _encode_query_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode-query-string.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js\");\n/* harmony import */ var _esri_arcgis_rest_form_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @esri/arcgis-rest-form-data */ \"./node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.mjs\");\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n\n\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nfunction encodeFormData(params, forceFormData) {\n    // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n    const useFormData = (0,_process_params_js__WEBPACK_IMPORTED_MODULE_0__.requiresFormData)(params) || forceFormData;\n    const newParams = (0,_process_params_js__WEBPACK_IMPORTED_MODULE_0__.processParams)(params);\n    if (useFormData) {\n        const formData = new _esri_arcgis_rest_form_data__WEBPACK_IMPORTED_MODULE_2__.FormData();\n        Object.keys(newParams).forEach((key) => {\n            if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n                /* To name the Blob:\n                 1. look to an alternate request parameter called 'fileName'\n                 2. see if 'name' has been tacked onto the Blob manually\n                 3. if all else fails, use the request parameter\n                */\n                const filename = newParams[\"fileName\"] || newParams[key].name || key;\n                formData.append(key, newParams[key], filename);\n            }\n            else {\n                formData.append(key, newParams[key]);\n            }\n        });\n        return formData;\n    }\n    else {\n        return (0,_encode_query_string_js__WEBPACK_IMPORTED_MODULE_1__.encodeQueryString)(params);\n    }\n}\n//# sourceMappingURL=encode-form-data.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"encodeParam\": () => (/* binding */ encodeParam),\n/* harmony export */   \"encodeQueryString\": () => (/* binding */ encodeQueryString)\n/* harmony export */ });\n/* harmony import */ var _process_params_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process-params.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js\");\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nfunction encodeParam(key, value) {\n    // For array of arrays, repeat key=value for each element of containing array\n    if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n        return value\n            .map((arrayElem) => encodeParam(key, arrayElem))\n            .join(\"&\");\n    }\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nfunction encodeQueryString(params) {\n    const newParams = (0,_process_params_js__WEBPACK_IMPORTED_MODULE_0__.processParams)(params);\n    return Object.keys(newParams)\n        .map((key) => {\n        return encodeParam(key, newParams[key]);\n    })\n        .join(\"&\");\n}\n//# sourceMappingURL=encode-query-string.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-code-challenge.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-code-challenge.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"generateCodeChallenge\": () => (/* binding */ generateCodeChallenge)\n/* harmony export */ });\n/* harmony import */ var _base_64_url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-64-url.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/base-64-url.js\");\n\n/**\n * Utility to hash the codeVerifier using sha256\n */\nfunction generateCodeChallenge(codeVerifier, win = window) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n        win = window;\n    }\n    if (codeVerifier && win.isSecureContext && win.crypto && win.crypto.subtle) {\n        const encoder = new win.TextEncoder();\n        const bytes = encoder.encode(codeVerifier);\n        return win.crypto.subtle\n            .digest(\"SHA-256\", bytes)\n            .then((buffer) => (0,_base_64_url_js__WEBPACK_IMPORTED_MODULE_0__.base64UrlEncode)(new Uint8Array(buffer), win));\n    }\n    return Promise.resolve(null);\n}\n//# sourceMappingURL=generate-code-challenge.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-code-challenge.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-random-string.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-random-string.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"generateRandomString\": () => (/* binding */ generateRandomString)\n/* harmony export */ });\n/* harmony import */ var _base_64_url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-64-url.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/utils/base-64-url.js\");\n\n/**\n * Utility to generate a random string to use as our `code_verifier`\n *\n * @param win the global `window` object for accepting a mock while testing.\n */\nfunction generateRandomString(win) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n        win = window;\n    }\n    const randomBytes = win.crypto.getRandomValues(new Uint8Array(32));\n    return (0,_base_64_url_js__WEBPACK_IMPORTED_MODULE_0__.base64UrlEncode)(randomBytes);\n}\n//# sourceMappingURL=generate-random-string.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-random-string.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"processParams\": () => (/* binding */ processParams),\n/* harmony export */   \"requiresFormData\": () => (/* binding */ requiresFormData)\n/* harmony export */ });\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nfunction requiresFormData(params) {\n    return Object.keys(params).some(key => {\n        let value = params[key];\n        if (!value) {\n            return false;\n        }\n        if (value && value.toParam) {\n            value = value.toParam();\n        }\n        const type = value.constructor.name;\n        switch (type) {\n            case \"Array\":\n                return false;\n            case \"Object\":\n                return false;\n            case \"Date\":\n                return false;\n            case \"Function\":\n                return false;\n            case \"Boolean\":\n                return false;\n            case \"String\":\n                return false;\n            case \"Number\":\n                return false;\n            default:\n                return true;\n        }\n    });\n}\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nfunction processParams(params) {\n    const newParams = {};\n    Object.keys(params).forEach(key => {\n        var _a, _b;\n        let param = params[key];\n        if (param && param.toParam) {\n            param = param.toParam();\n        }\n        if (!param &&\n            param !== 0 &&\n            typeof param !== \"boolean\" &&\n            typeof param !== \"string\") {\n            return;\n        }\n        const type = param.constructor.name;\n        let value;\n        // properly encodes objects, arrays and dates for arcgis.com and other services.\n        // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n        // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n        // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n        switch (type) {\n            case \"Array\":\n                // Based on the first element of the array, classify array as an array of arrays, an array of objects\n                // to be stringified, or an array of non-objects to be comma-separated\n                // eslint-disable-next-line no-case-declarations\n                const firstElementType = (_b = (_a = param[0]) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name;\n                value =\n                    firstElementType === \"Array\" ? param : // pass thru array of arrays\n                        firstElementType === \"Object\" ? JSON.stringify(param) : // stringify array of objects\n                            param.join(\",\"); // join other types of array elements\n                break;\n            case \"Object\":\n                value = JSON.stringify(param);\n                break;\n            case \"Date\":\n                value = param.valueOf();\n                break;\n            case \"Function\":\n                value = null;\n                break;\n            case \"Boolean\":\n                value = param + \"\";\n                break;\n            default:\n                value = param;\n                break;\n        }\n        if (value || value === 0 || typeof value === \"string\" || Array.isArray(value)) {\n            newParams[key] = value;\n        }\n    });\n    return newParams;\n}\n//# sourceMappingURL=process-params.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/retryAuthError.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/retryAuthError.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n//# sourceMappingURL=retryAuthError.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/retryAuthError.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"warn\": () => (/* binding */ warn)\n/* harmony export */ });\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Method used internally to surface messages to developers.\n */\nfunction warn(message) {\n    if (console && console.warn) {\n        console.warn.apply(console, [message]);\n    }\n}\n//# sourceMappingURL=warn.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/utils/with-options.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/utils/with-options.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"withOptions\": () => (/* binding */ withOptions)\n/* harmony export */ });\n/**\n * Allows you to wrap individual methods with a default set of request options. This is useful to avoid setting the same option more then once and allows for interacting and setting defaults in a functional manner.\n *\n * ```js\n * import { withOptions } from \"@esri/arcgis-rest-request\";\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const queryTrails = withOptions({\n *   url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0/\"}, queryFeatures);\n *\n * queryTrails({\n *   where: \"ELEV_FT > 1000\"\n * }).then(result);\n *\n * const queryTrailsAsUser = withOptions({\n *   authentication: ArcGISIdentityManager\n * }, queryTrails);\n *\n * queryTrailsAsUser({\n *   where: \"TRL_NAME LIKE '%backbone%'\"\n * }).then(result);\n * ```\n *\n * @param defaultOptions The options to pass into to the `func`.\n * @param func Any function that accepts anything extending `IRequestOptions` as its last parameter.\n * @returns A copy of `func` with the `defaultOptions` passed in as defaults.\n */\nfunction withOptions(defaultOptions, func) {\n    return (...args) => {\n        const options = typeof args[args.length - 1] === \"object\"\n            ? Object.assign(Object.assign({}, defaultOptions), args.pop()) : defaultOptions;\n        return func(...[...args, options]);\n    };\n}\n//# sourceMappingURL=with-options.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/utils/with-options.js?");

/***/ }),

/***/ "./node_modules/@esri/arcgis-rest-request/dist/esm/validate-app-access.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@esri/arcgis-rest-request/dist/esm/validate-app-access.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"validateAppAccess\": () => (/* binding */ validateAppAccess)\n/* harmony export */ });\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./request.js */ \"./node_modules/@esri/arcgis-rest-request/dist/esm/request.js\");\n/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Validates that the user has access to the application\n * and if they user should be presented a \"View Only\" mode\n *\n * This is only needed/valid for Esri applications that are \"licensed\"\n * and shipped in ArcGIS Online or ArcGIS Enterprise. Most custom applications\n * should not need or use this.\n *\n * ```js\n * import { validateAppAccess } from '@esri/arcgis-rest-request';\n *\n * return validateAppAccess('your-token', 'theClientId')\n * .then((result) => {\n *    if (!result.value) {\n *      // redirect or show some other ui\n *    } else {\n *      if (result.viewOnlyUserTypeApp) {\n *        // use this to inform your app to show a \"View Only\" mode\n *      }\n *    }\n * })\n * .catch((err) => {\n *  // two possible errors\n *  // invalid clientId: {\"error\":{\"code\":400,\"messageCode\":\"GWM_0007\",\"message\":\"Invalid request\",\"details\":[]}}\n *  // invalid token: {\"error\":{\"code\":498,\"message\":\"Invalid token.\",\"details\":[]}}\n * })\n * ```\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token platform token\n * @param clientId application client id\n * @param portal Optional\n */\nfunction validateAppAccess(token, clientId, portal = \"https://www.arcgis.com/sharing/rest\") {\n    const url = `${portal}/oauth2/validateAppAccess`;\n    const ro = {\n        method: \"POST\",\n        params: {\n            f: \"json\",\n            client_id: clientId,\n            token\n        }\n    };\n    return (0,_request_js__WEBPACK_IMPORTED_MODULE_0__.request)(url, ro);\n}\n//# sourceMappingURL=validate-app-access.js.map\n\n//# sourceURL=webpack://hub/./node_modules/@esri/arcgis-rest-request/dist/esm/validate-app-access.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.js"));
/******/ }
]);